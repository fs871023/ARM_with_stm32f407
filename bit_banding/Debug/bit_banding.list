
bit_banding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000012c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d4  080002dc  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d4  080002d4  000102dc  2**0
                  CONTENTS
  4 .ARM          00000000  080002d4  080002d4  000102dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d4  080002dc  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d8  080002d8  000102d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080002dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080002dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000102dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008fd  00000000  00000000  0001030c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000197  00000000  00000000  00010c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001941  00000000  00000000  00010e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000005c7  00000000  00000000  00012759  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000750e  00000000  00000000  00012d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001a22e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001a2ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080002bc 	.word	0x080002bc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080002bc 	.word	0x080002bc

080001e8 <main>:
*/
#include<stdio.h>
#define ALIAS_BASE 		0x220000000U
#define BITBAND_BASE 	0x200000000U
int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	//change the 7th bit position of the memory location 0x2000_0200
	//Alias addr = alias_base + (32* (bit_band_memory_addr - bit_band_base)) + bit * 4
	//e.g.0x2200_0000+(32+(0x2000_0200-02000_0000))+7*4

	uint8_t *ptr = (uint8_t*)0x20000200;
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <main+0x30>)
 80001f0:	607b      	str	r3, [r7, #4]

	*ptr = 0xff;//reset value
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	22ff      	movs	r2, #255	; 0xff
 80001f6:	701a      	strb	r2, [r3, #0]
	//normal:read-modify-write
	//clearing 7th bit position
	*ptr &= ~(1 << 7);
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000200:	b2da      	uxtb	r2, r3
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	701a      	strb	r2, [r3, #0]

	*ptr = 0xff;//reset value
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	22ff      	movs	r2, #255	; 0xff
 800020a:	701a      	strb	r2, [r3, #0]
	//bit_band method
	uint8_t *alias_addr = ALIAS_BASE + (32 * (0x20000200 - BITBAND_BASE) + 7 * 4 );
 800020c:	4b03      	ldr	r3, [pc, #12]	; (800021c <main+0x34>)
 800020e:	603b      	str	r3, [r7, #0]
	//clearing 7th bit of addr 0x2000_0200
	*alias_addr = 0;
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]

	//see memory browser 0x20000200 and Disassembly
	//bit banding is faster (3<6)
	for(;;);
 8000216:	e7fe      	b.n	8000216 <main+0x2e>
 8000218:	20000200 	.word	0x20000200
 800021c:	2000401c 	.word	0x2000401c

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490e      	ldr	r1, [pc, #56]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0b      	ldr	r4, [pc, #44]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 f811 	bl	8000274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffc9 	bl	80001e8 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000264:	080002dc 	.word	0x080002dc
  ldr r2, =_sbss
 8000268:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800026c:	2000001c 	.word	0x2000001c

08000270 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC_IRQHandler>
	...

08000274 <__libc_init_array>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	4e0d      	ldr	r6, [pc, #52]	; (80002ac <__libc_init_array+0x38>)
 8000278:	4c0d      	ldr	r4, [pc, #52]	; (80002b0 <__libc_init_array+0x3c>)
 800027a:	1ba4      	subs	r4, r4, r6
 800027c:	10a4      	asrs	r4, r4, #2
 800027e:	2500      	movs	r5, #0
 8000280:	42a5      	cmp	r5, r4
 8000282:	d109      	bne.n	8000298 <__libc_init_array+0x24>
 8000284:	4e0b      	ldr	r6, [pc, #44]	; (80002b4 <__libc_init_array+0x40>)
 8000286:	4c0c      	ldr	r4, [pc, #48]	; (80002b8 <__libc_init_array+0x44>)
 8000288:	f000 f818 	bl	80002bc <_init>
 800028c:	1ba4      	subs	r4, r4, r6
 800028e:	10a4      	asrs	r4, r4, #2
 8000290:	2500      	movs	r5, #0
 8000292:	42a5      	cmp	r5, r4
 8000294:	d105      	bne.n	80002a2 <__libc_init_array+0x2e>
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800029c:	4798      	blx	r3
 800029e:	3501      	adds	r5, #1
 80002a0:	e7ee      	b.n	8000280 <__libc_init_array+0xc>
 80002a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002a6:	4798      	blx	r3
 80002a8:	3501      	adds	r5, #1
 80002aa:	e7f2      	b.n	8000292 <__libc_init_array+0x1e>
 80002ac:	080002d4 	.word	0x080002d4
 80002b0:	080002d4 	.word	0x080002d4
 80002b4:	080002d4 	.word	0x080002d4
 80002b8:	080002d8 	.word	0x080002d8

080002bc <_init>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	bf00      	nop
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr

080002c8 <_fini>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	bf00      	nop
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr
