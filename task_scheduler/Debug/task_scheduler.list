
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001288  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001430  08001430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014e0  080014e0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080014e0  080014e0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014e0  080014e0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014e0  080014e0  000114e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080014e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000084  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ec  200000ec  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e8e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000058e  00000000  00000000  00020f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000200  00000000  00000000  000214b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b8  00000000  00000000  000216b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d32  00000000  00000000  00021870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001abe  00000000  00000000  000245a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000099ad  00000000  00000000  00026060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002fa0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d70  00000000  00000000  0002fa60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001418 	.word	0x08001418

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001418 	.word	0x08001418

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <led_off+0x30>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <schedule>:
TCB_t user_task[MAX_TASKS];

uint8_t current_task = 1; //task is running
uint32_t g_tick_count = 0;
void schedule(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
	//pend the pendSV
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80002c6:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <schedule+0x24>)
 80002c8:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	e000ed04 	.word	0xe000ed04

080002e8 <task_delay>:
void task_delay(uint32_t tick_count)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	//So, it is better to disable interrupt before we access this global var here.
	//But in some hard operation system, the interrupt disabling must be concerned, which would make the system fail.

	//disable interrupt
	//use PRIMASK reg
	INTERRUPT_DISABLE();
 80002f0:	f04f 0001 	mov.w	r0, #1
 80002f4:	f380 8810 	msr	PRIMASK, r0

	if(current_task)//do nothing in idle task
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <task_delay+0x54>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d015      	beq.n	800032c <task_delay+0x44>
	{
		//tick system maintained globally + tick task sent = block count of a task
		user_task[current_task].block_count = g_tick_count + tick_count;
 8000300:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <task_delay+0x58>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b0d      	ldr	r3, [pc, #52]	; (800033c <task_delay+0x54>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	441a      	add	r2, r3
 800030e:	490d      	ldr	r1, [pc, #52]	; (8000344 <task_delay+0x5c>)
 8000310:	0103      	lsls	r3, r0, #4
 8000312:	440b      	add	r3, r1
 8000314:	3304      	adds	r3, #4
 8000316:	601a      	str	r2, [r3, #0]
		//the task will not be scheduled due to the block state
		user_task[current_task].current_state = TASK_BLOCK_STATE;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <task_delay+0x54>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4a09      	ldr	r2, [pc, #36]	; (8000344 <task_delay+0x5c>)
 800031e:	011b      	lsls	r3, r3, #4
 8000320:	4413      	add	r3, r2
 8000322:	3308      	adds	r3, #8
 8000324:	22ff      	movs	r2, #255	; 0xff
 8000326:	701a      	strb	r2, [r3, #0]
		schedule();
 8000328:	f7ff ffca 	bl	80002c0 <schedule>
	}

	//enable interrupt
	INTERRUPT_ENABLE();
 800032c:	f04f 0000 	mov.w	r0, #0
 8000330:	f380 8810 	msr	PRIMASK, r0
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000000 	.word	0x20000000
 8000340:	200000d4 	.word	0x200000d4
 8000344:	20000084 	.word	0x20000084

08000348 <idle_task>:

void idle_task(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
	while(1);
 800034c:	e7fe      	b.n	800034c <idle_task+0x4>

0800034e <task1_handler>:
}
void task1_handler(void)
{
 800034e:	b580      	push	{r7, lr}
 8000350:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 8000352:	200c      	movs	r0, #12
 8000354:	f7ff ff82 	bl	800025c <led_on>
		task_delay(1000);
 8000358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035c:	f7ff ffc4 	bl	80002e8 <task_delay>
//		delay(DELAY_COUNT_1S);
		led_off(LED_GREEN);
 8000360:	200c      	movs	r0, #12
 8000362:	f7ff ff93 	bl	800028c <led_off>
		task_delay(1000);
 8000366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800036a:	f7ff ffbd 	bl	80002e8 <task_delay>
		led_on(LED_GREEN);
 800036e:	e7f0      	b.n	8000352 <task1_handler+0x4>

08000370 <task2_handler>:
//		delay(DELAY_COUNT_1S);
	}
}
void task2_handler(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000374:	200d      	movs	r0, #13
 8000376:	f7ff ff71 	bl	800025c <led_on>
		task_delay(500);
 800037a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037e:	f7ff ffb3 	bl	80002e8 <task_delay>
//		delay(DELAY_COUNT_500MS);
		led_off(LED_ORANGE);
 8000382:	200d      	movs	r0, #13
 8000384:	f7ff ff82 	bl	800028c <led_off>
		task_delay(500);
 8000388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800038c:	f7ff ffac 	bl	80002e8 <task_delay>
		led_on(LED_ORANGE);
 8000390:	e7f0      	b.n	8000374 <task2_handler+0x4>

08000392 <task3_handler>:
//		delay(DELAY_COUNT_500MS);
	}
}
void task3_handler(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000396:	200e      	movs	r0, #14
 8000398:	f7ff ff60 	bl	800025c <led_on>
		task_delay(250);
 800039c:	20fa      	movs	r0, #250	; 0xfa
 800039e:	f7ff ffa3 	bl	80002e8 <task_delay>
//		delay(DELAY_COUNT_250MS);
		led_off(LED_RED);
 80003a2:	200e      	movs	r0, #14
 80003a4:	f7ff ff72 	bl	800028c <led_off>
		task_delay(250);
 80003a8:	20fa      	movs	r0, #250	; 0xfa
 80003aa:	f7ff ff9d 	bl	80002e8 <task_delay>
		led_on(LED_RED);
 80003ae:	e7f2      	b.n	8000396 <task3_handler+0x4>

080003b0 <task4_handler>:
//		delay(DELAY_COUNT_250MS);
	}
}
void task4_handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 80003b4:	200f      	movs	r0, #15
 80003b6:	f7ff ff51 	bl	800025c <led_on>
		task_delay(125);
 80003ba:	207d      	movs	r0, #125	; 0x7d
 80003bc:	f7ff ff94 	bl	80002e8 <task_delay>
//		delay(DELAY_COUNT_125MS);
		led_off(LED_BLUE);
 80003c0:	200f      	movs	r0, #15
 80003c2:	f7ff ff63 	bl	800028c <led_off>
		task_delay(125);
 80003c6:	207d      	movs	r0, #125	; 0x7d
 80003c8:	f7ff ff8e 	bl	80002e8 <task_delay>
		led_on(LED_BLUE);
 80003cc:	e7f2      	b.n	80003b4 <task4_handler+0x4>
	...

080003d0 <init_systick_timer>:
//		delay(DELAY_COUNT_125MS);
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t count_val = (SYSTICK_TIM_CLK / tick_hz)-1;
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <init_systick_timer+0x60>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e0:	3b01      	subs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
	//see systick reload register
	//systick reload reg : the reg which specifies the start value
	//to load into the systick current value(CVR) reg.
	//When the timer enabled, the value of RVR will copied to CVR
	//When the CVR count to 0, the value of RVR will copied to CVR, too
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <init_systick_timer+0x64>)
 80003e6:	613b      	str	r3, [r7, #16]
	//see systick control and status register(CSR)
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <init_systick_timer+0x68>)
 80003ea:	60fb      	str	r3, [r7, #12]

	//clear the value of RVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80003ec:	693b      	ldr	r3, [r7, #16]
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
	//load the value in to RVR
	*pSRVR |= count_val;
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	431a      	orrs	r2, r3
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	601a      	str	r2, [r3, #0]

	//set CSR
	*pSCSR |= (1 << 1);//enabled systick exception request (counting down to 0 assert systick exception request)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f043 0202 	orr.w	r2, r3, #2
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);//indicates the clock source, processor clock source
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f043 0204 	orr.w	r2, r3, #4
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 0);//enabled the counter
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f043 0201 	orr.w	r2, r3, #1
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	601a      	str	r2, [r3, #0]
}
 8000422:	bf00      	nop
 8000424:	371c      	adds	r7, #28
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	00f42400 	.word	0x00f42400
 8000434:	e000e014 	.word	0xe000e014
 8000438:	e000e010 	.word	0xe000e010

0800043c <init_scheduler_stack>:
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800043c:	4603      	mov	r3, r0
	__asm volatile("MSR MSP, %0": : "r" (sched_top_of_stack) : );
 800043e:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");//go back to main
 8000442:	4770      	bx	lr
	//BX: branch indirect
	//LR: link reg, which stores the return addr
}
 8000444:	bf00      	nop
	...

08000448 <init_tasks_stack>:
//store dummy sf1(stack frame)& sf2 in stack memory of each task
void init_tasks_stack(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
	//use ptr to access stack memory
	user_task[0].current_state = TASK_READY_STATE;
 800044e:	4b3a      	ldr	r3, [pc, #232]	; (8000538 <init_tasks_stack+0xf0>)
 8000450:	2200      	movs	r2, #0
 8000452:	721a      	strb	r2, [r3, #8]
	user_task[0].psp_value = IDLE_STACK_START;
 8000454:	4b38      	ldr	r3, [pc, #224]	; (8000538 <init_tasks_stack+0xf0>)
 8000456:	4a39      	ldr	r2, [pc, #228]	; (800053c <init_tasks_stack+0xf4>)
 8000458:	601a      	str	r2, [r3, #0]
	user_task[0].task_handler = idle_task;
 800045a:	4b37      	ldr	r3, [pc, #220]	; (8000538 <init_tasks_stack+0xf0>)
 800045c:	4a38      	ldr	r2, [pc, #224]	; (8000540 <init_tasks_stack+0xf8>)
 800045e:	60da      	str	r2, [r3, #12]

	user_task[1].current_state = TASK_READY_STATE;
 8000460:	4b35      	ldr	r3, [pc, #212]	; (8000538 <init_tasks_stack+0xf0>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
	user_task[1].psp_value = T1_STACK_START;
 8000466:	4b34      	ldr	r3, [pc, #208]	; (8000538 <init_tasks_stack+0xf0>)
 8000468:	4a36      	ldr	r2, [pc, #216]	; (8000544 <init_tasks_stack+0xfc>)
 800046a:	611a      	str	r2, [r3, #16]
	user_task[1].task_handler = task1_handler;
 800046c:	4b32      	ldr	r3, [pc, #200]	; (8000538 <init_tasks_stack+0xf0>)
 800046e:	4a36      	ldr	r2, [pc, #216]	; (8000548 <init_tasks_stack+0x100>)
 8000470:	61da      	str	r2, [r3, #28]

	user_task[2].current_state = TASK_READY_STATE;
 8000472:	4b31      	ldr	r3, [pc, #196]	; (8000538 <init_tasks_stack+0xf0>)
 8000474:	2200      	movs	r2, #0
 8000476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_task[2].psp_value = T2_STACK_START;
 800047a:	4b2f      	ldr	r3, [pc, #188]	; (8000538 <init_tasks_stack+0xf0>)
 800047c:	4a33      	ldr	r2, [pc, #204]	; (800054c <init_tasks_stack+0x104>)
 800047e:	621a      	str	r2, [r3, #32]
	user_task[2].task_handler = task2_handler;
 8000480:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <init_tasks_stack+0xf0>)
 8000482:	4a33      	ldr	r2, [pc, #204]	; (8000550 <init_tasks_stack+0x108>)
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c

	user_task[3].current_state = TASK_READY_STATE;
 8000486:	4b2c      	ldr	r3, [pc, #176]	; (8000538 <init_tasks_stack+0xf0>)
 8000488:	2200      	movs	r2, #0
 800048a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_task[3].psp_value = T3_STACK_START;
 800048e:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <init_tasks_stack+0xf0>)
 8000490:	4a30      	ldr	r2, [pc, #192]	; (8000554 <init_tasks_stack+0x10c>)
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
	user_task[3].task_handler = task3_handler;
 8000494:	4b28      	ldr	r3, [pc, #160]	; (8000538 <init_tasks_stack+0xf0>)
 8000496:	4a30      	ldr	r2, [pc, #192]	; (8000558 <init_tasks_stack+0x110>)
 8000498:	63da      	str	r2, [r3, #60]	; 0x3c

	user_task[4].current_state = TASK_READY_STATE;
 800049a:	4b27      	ldr	r3, [pc, #156]	; (8000538 <init_tasks_stack+0xf0>)
 800049c:	2200      	movs	r2, #0
 800049e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	user_task[4].psp_value = T4_STACK_START;
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <init_tasks_stack+0xf0>)
 80004a4:	4a2d      	ldr	r2, [pc, #180]	; (800055c <init_tasks_stack+0x114>)
 80004a6:	641a      	str	r2, [r3, #64]	; 0x40
	user_task[4].task_handler = task4_handler;
 80004a8:	4b23      	ldr	r3, [pc, #140]	; (8000538 <init_tasks_stack+0xf0>)
 80004aa:	4a2d      	ldr	r2, [pc, #180]	; (8000560 <init_tasks_stack+0x118>)
 80004ac:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t  *pPSP;
	for(int i = 0; i < MAX_TASKS; i ++)
 80004ae:	2300      	movs	r3, #0
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	e037      	b.n	8000524 <init_tasks_stack+0xdc>
	{
//		pPSP = (uint32_t*)psp_of_tasks[i];
		pPSP = (uint32_t*) user_task[i].psp_value;
 80004b4:	4a20      	ldr	r2, [pc, #128]	; (8000538 <init_tasks_stack+0xf0>)
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	011b      	lsls	r3, r3, #4
 80004ba:	4413      	add	r3, r2
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	60fb      	str	r3, [r7, #12]

		//decrement first then store value
		pPSP --;
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	3b04      	subs	r3, #4
 80004c4:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80004cc:	601a      	str	r2, [r3, #0]

		pPSP --;//PC  return addr
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	3b04      	subs	r3, #4
 80004d2:	60fb      	str	r3, [r7, #12]
//		*pPSP = task_handler[i];//make sure it is odd
		*pPSP = (uint32_t)user_task[i].task_handler;
 80004d4:	4a18      	ldr	r2, [pc, #96]	; (8000538 <init_tasks_stack+0xf0>)
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	4413      	add	r3, r2
 80004dc:	330c      	adds	r3, #12
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	601a      	str	r2, [r3, #0]

		pPSP --;//LR
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3b04      	subs	r3, #4
 80004ea:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f06f 0202 	mvn.w	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
		//return to thread mode, exception return uses non-floatint state
		//from the PSP, and execution uses PSP after return

		//all registers are zero (13 zeros)
		for(int j = 0; j < 13; j ++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	e008      	b.n	800050c <init_tasks_stack+0xc4>
		{
			pPSP --;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3b04      	subs	r3, #4
 80004fe:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < 13; j ++)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3301      	adds	r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b0c      	cmp	r3, #12
 8000510:	ddf3      	ble.n	80004fa <init_tasks_stack+0xb2>
		}
		//preserve the value of psp
//		psp_of_tasks[i] = (uint32_t)pPSP;
		user_task[i].psp_value = (uint32_t)pPSP;
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4908      	ldr	r1, [pc, #32]	; (8000538 <init_tasks_stack+0xf0>)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	440b      	add	r3, r1
 800051c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i ++)
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	3301      	adds	r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2b04      	cmp	r3, #4
 8000528:	ddc4      	ble.n	80004b4 <init_tasks_stack+0x6c>

	}
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000084 	.word	0x20000084
 800053c:	2001f000 	.word	0x2001f000
 8000540:	08000349 	.word	0x08000349
 8000544:	20020000 	.word	0x20020000
 8000548:	0800034f 	.word	0x0800034f
 800054c:	2001fc00 	.word	0x2001fc00
 8000550:	08000371 	.word	0x08000371
 8000554:	2001f800 	.word	0x2001f800
 8000558:	08000393 	.word	0x08000393
 800055c:	2001f400 	.word	0x2001f400
 8000560:	080003b1 	.word	0x080003b1

08000564 <enable_processor_fault>:

void enable_processor_fault(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 800056a:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <enable_processor_fault+0x3c>)
 800056c:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1 << 16); //mem manage fault
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //bus fault
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	601a      	str	r2, [r3, #0]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed24 	.word	0xe000ed24

080005a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 80005a8:	4801      	ldr	r0, [pc, #4]	; (80005b0 <HardFault_Handler+0xc>)
 80005aa:	f000 faa5 	bl	8000af8 <puts>
	while(1);
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0xa>
 80005b0:	08001430 	.word	0x08001430

080005b4 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 80005b8:	4801      	ldr	r0, [pc, #4]	; (80005c0 <MemManage_Handler+0xc>)
 80005ba:	f000 fa9d 	bl	8000af8 <puts>
	while(1);
 80005be:	e7fe      	b.n	80005be <MemManage_Handler+0xa>
 80005c0:	08001448 	.word	0x08001448

080005c4 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 80005c8:	4801      	ldr	r0, [pc, #4]	; (80005d0 <BusFault_Handler+0xc>)
 80005ca:	f000 fa95 	bl	8000af8 <puts>
	while(1);
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0xa>
 80005d0:	08001460 	.word	0x08001460

080005d4 <get_psp_value>:
}

uint32_t get_psp_value(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	return user_task[current_task].psp_value;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <get_psp_value+0x1c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4a05      	ldr	r2, [pc, #20]	; (80005f4 <get_psp_value+0x20>)
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	4413      	add	r3, r2
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000084 	.word	0x20000084

080005f8 <save_psp_value>:
void save_psp_value(uint32_t current_psp_value)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	user_task[current_task].psp_value = current_psp_value;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <save_psp_value+0x24>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <save_psp_value+0x28>)
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	20000084 	.word	0x20000084

08000624 <update_next_task>:
void update_next_task(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
	int state = TASK_BLOCK_STATE;
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < MAX_TASKS; i ++)
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	e024      	b.n	800067e <update_next_task+0x5a>
	{
		current_task ++;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <update_next_task+0x7c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <update_next_task+0x7c>)
 800063e:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <update_next_task+0x7c>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <update_next_task+0x80>)
 8000646:	fba3 1302 	umull	r1, r3, r3, r2
 800064a:	0899      	lsrs	r1, r3, #2
 800064c:	460b      	mov	r3, r1
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <update_next_task+0x7c>)
 8000658:	701a      	strb	r2, [r3, #0]
		state = user_task[current_task].current_state;// get its current state
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <update_next_task+0x7c>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <update_next_task+0x84>)
 8000660:	011b      	lsls	r3, r3, #4
 8000662:	4413      	add	r3, r2
 8000664:	3308      	adds	r3, #8
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_task != 0) )
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d103      	bne.n	8000678 <update_next_task+0x54>
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <update_next_task+0x7c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d106      	bne.n	8000686 <update_next_task+0x62>
	for(int i = 0; i < MAX_TASKS; i ++)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b04      	cmp	r3, #4
 8000682:	ddd7      	ble.n	8000634 <update_next_task+0x10>
 8000684:	e000      	b.n	8000688 <update_next_task+0x64>
			break; // if it is ready, then schedule it
 8000686:	bf00      	nop
	}
	if(state != TASK_READY_STATE)//all tasks are blocked
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <update_next_task+0x70>
		current_task = 0;
 800068e:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <update_next_task+0x7c>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	20000000 	.word	0x20000000
 80006a4:	cccccccd 	.word	0xcccccccd
 80006a8:	20000084 	.word	0x20000084

080006ac <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. initialize the PSP with task1 stack start addr
	//SP = MSP here
	//save the LR first, or the value of LR will lost, which is come from main()
	__asm volatile("PUSH {LR}");
 80006ac:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");//get the value of psp of current task
 80006ae:	f7ff ff91 	bl	80005d4 <get_psp_value>
	//Branch with Link because we will come back to this func
	__asm volatile("MSR PSP, R0");// initialize PSP reg
 80006b2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");//pop back LR value
 80006b6:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change SP to PSP using CONTROL register
	__asm volatile("MOV R0, #0X02");// set first bit of CONTROL reg
 80006ba:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, R0");//change sp reg addr from MSP to PSP
 80006be:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80006c2:	4770      	bx	lr
	//LR: reg of capturing the return addr. it knows where to go back when the func finished.
}
 80006c4:	bf00      	nop
	...

080006c8 <main>:

int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	enable_processor_fault();//copy code from fault_gen
 80006cc:	f7ff ff4a 	bl	8000564 <enable_processor_fault>
	//initialize the scheduler stack
	init_scheduler_stack(SCHED_STACK_START);
 80006d0:	4807      	ldr	r0, [pc, #28]	; (80006f0 <main+0x28>)
 80006d2:	f7ff feb3 	bl	800043c <init_scheduler_stack>
//	task_handler[0] = (uint32_t)task1_handler;
//	task_handler[1] = (uint32_t)task2_handler;
//	task_handler[2] = (uint32_t)task3_handler;
//	task_handler[3] = (uint32_t)task4_handler;
	//task stack init
	init_tasks_stack();
 80006d6:	f7ff feb7 	bl	8000448 <init_tasks_stack>

	led_init_all();
 80006da:	f7ff fd85 	bl	80001e8 <led_init_all>

	//generate systick timer exception
	init_systick_timer(TICK_HZ);
 80006de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e2:	f7ff fe75 	bl	80003d0 <init_systick_timer>

	switch_sp_to_psp();
 80006e6:	f7ff ffe1 	bl	80006ac <switch_sp_to_psp>

	task1_handler();//trap here
 80006ea:	f7ff fe30 	bl	800034e <task1_handler>
    /* Loop forever */
	for(;;);
 80006ee:	e7fe      	b.n	80006ee <main+0x26>
 80006f0:	2001ec00 	.word	0x2001ec00

080006f4 <PendSV_Handler>:
//context switch here
__attribute__((naked)) void PendSV_Handler(void)
{
	/*Save the context of current task*/
	//1. get current running task's PSP value
	__asm volatile("MRS R0, PSP");
 80006f4:	f3ef 8009 	mrs	r0, PSP

	//2. using that PSP value store SF2 (R4 to R11)
	//**we can't use PUSH here, because it will affect the MSP
	//we store the reg value to task private stack
	__asm volatile("STMDB R0!, {R4-R11}");
 80006f8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//!: what is loaded from or stored to is written back into Rn
	// so Rn will update when each store
	//STMDB: store multiple reg, decrement before each access

	//!!save LR value first
	__asm volatile("PUSH {LR}");
 80006fc:	b500      	push	{lr}
	//3. save the current value of PSP
	__asm volatile("BL save_psp_value");
 80006fe:	f7ff ff7b 	bl	80005f8 <save_psp_value>

	/*Retrieve the context of next task*/
	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 8000702:	f7ff ff8f 	bl	8000624 <update_next_task>
	//2. get its past PSP value
	__asm volatile("BL get_psp_value");
 8000706:	f7ff ff65 	bl	80005d4 <get_psp_value>

	//3. using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!, {R4-R11}");
 800070a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//LDMIA: load multiple reg and increment after

	//4. update PSP and exit
	__asm volatile("MSR PSP, R0");
 800070e:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 8000712:	f85d eb04 	ldr.w	lr, [sp], #4
	//because it is naked now
	__asm volatile("BX LR");
 8000716:	4770      	bx	lr
}
 8000718:	bf00      	nop
	...

0800071c <update_global_tick_count>:
void update_global_tick_count(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	g_tick_count ++;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <update_global_tick_count+0x18>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a03      	ldr	r2, [pc, #12]	; (8000734 <update_global_tick_count+0x18>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200000d4 	.word	0x200000d4

08000738 <unblock_tasks>:
void unblock_tasks(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
	for(int i = 1; i < MAX_TASKS; i ++)//we don't need to check the idle task
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	e01b      	b.n	800077c <unblock_tasks+0x44>
	{// user task is not running
		if(user_task[i].current_state != TASK_READY_STATE)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <unblock_tasks+0x58>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	011b      	lsls	r3, r3, #4
 800074a:	4413      	add	r3, r2
 800074c:	3308      	adds	r3, #8
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d010      	beq.n	8000776 <unblock_tasks+0x3e>
		{// the delay is elapsed
			if(user_task[i].block_count == g_tick_count)
 8000754:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <unblock_tasks+0x58>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	4413      	add	r3, r2
 800075c:	3304      	adds	r3, #4
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <unblock_tasks+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d106      	bne.n	8000776 <unblock_tasks+0x3e>
			{// change state
				user_task[i].current_state = TASK_READY_STATE;
 8000768:	4a09      	ldr	r2, [pc, #36]	; (8000790 <unblock_tasks+0x58>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4413      	add	r3, r2
 8000770:	3308      	adds	r3, #8
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i ++)//we don't need to check the idle task
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	3301      	adds	r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b04      	cmp	r3, #4
 8000780:	dde0      	ble.n	8000744 <unblock_tasks+0xc>
			}
		}
	}
}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	20000084 	.word	0x20000084
 8000794:	200000d4 	.word	0x200000d4

08000798 <SysTick_Handler>:
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <SysTick_Handler+0x2c>)
 80007a0:	607b      	str	r3, [r7, #4]
	update_global_tick_count();
 80007a2:	f7ff ffbb 	bl	800071c <update_global_tick_count>
	printf("systick\n");
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <SysTick_Handler+0x30>)
 80007a8:	f000 f9a6 	bl	8000af8 <puts>
	//check if there is any blocked task which can change to ready state
	//by comparing block_tick_count or block period of tasks
	//with the global_tick_count value
	unblock_tasks();
 80007ac:	f7ff ffc4 	bl	8000738 <unblock_tasks>
	//pend the pendSV exception
	*pICSR |= (1 << 28);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	601a      	str	r2, [r3, #0]
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	e000ed04 	.word	0xe000ed04
 80007c8:	08001474 	.word	0x08001474

080007cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <ITM_SendChar+0x48>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <ITM_SendChar+0x48>)
 80007dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <ITM_SendChar+0x4c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <ITM_SendChar+0x4c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007ee:	bf00      	nop
 80007f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f8      	beq.n	80007f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000edfc 	.word	0xe000edfc
 8000818:	e0000e00 	.word	0xe0000e00

0800081c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082e:	f3af 8000 	nop.w
 8000832:	4601      	mov	r1, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf0      	blt.n	800082e <_read+0x12>
	}

return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	e009      	b.n	800087c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffab 	bl	80007cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3301      	adds	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697a      	ldr	r2, [r7, #20]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	429a      	cmp	r2, r3
 8000882:	dbf1      	blt.n	8000868 <_write+0x12>
	}
	return len;
 8000884:	687b      	ldr	r3, [r7, #4]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <_close>:

int _close(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	return -1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	605a      	str	r2, [r3, #4]
	return 0;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <_isatty>:

int _isatty(int file)
{
 80008c6:	b480      	push	{r7}
 80008c8:	b083      	sub	sp, #12
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
	return 1;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
	return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
	...

080008f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000900:	4a14      	ldr	r2, [pc, #80]	; (8000954 <_sbrk+0x5c>)
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <_sbrk+0x60>)
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <_sbrk+0x64>)
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <_sbrk+0x68>)
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	429a      	cmp	r2, r3
 8000926:	d207      	bcs.n	8000938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000928:	f000 f846 	bl	80009b8 <__errno>
 800092c:	4603      	mov	r3, r0
 800092e:	220c      	movs	r2, #12
 8000930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
 8000936:	e009      	b.n	800094c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <_sbrk+0x64>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <_sbrk+0x64>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <_sbrk+0x64>)
 8000948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20020000 	.word	0x20020000
 8000958:	00000400 	.word	0x00000400
 800095c:	200000d8 	.word	0x200000d8
 8000960:	200000f0 	.word	0x200000f0

08000964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000968:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000992:	f000 f817 	bl	80009c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fe97 	bl	80006c8 <main>

0800099a <LoopForever>:

LoopForever:
    b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009a8:	080014e8 	.word	0x080014e8
  ldr r2, =_sbss
 80009ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009b0:	200000ec 	.word	0x200000ec

080009b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <__errno>:
 80009b8:	4b01      	ldr	r3, [pc, #4]	; (80009c0 <__errno+0x8>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000004 	.word	0x20000004

080009c4 <__libc_init_array>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	4d0d      	ldr	r5, [pc, #52]	; (80009fc <__libc_init_array+0x38>)
 80009c8:	4c0d      	ldr	r4, [pc, #52]	; (8000a00 <__libc_init_array+0x3c>)
 80009ca:	1b64      	subs	r4, r4, r5
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	2600      	movs	r6, #0
 80009d0:	42a6      	cmp	r6, r4
 80009d2:	d109      	bne.n	80009e8 <__libc_init_array+0x24>
 80009d4:	4d0b      	ldr	r5, [pc, #44]	; (8000a04 <__libc_init_array+0x40>)
 80009d6:	4c0c      	ldr	r4, [pc, #48]	; (8000a08 <__libc_init_array+0x44>)
 80009d8:	f000 fd1e 	bl	8001418 <_init>
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	10a4      	asrs	r4, r4, #2
 80009e0:	2600      	movs	r6, #0
 80009e2:	42a6      	cmp	r6, r4
 80009e4:	d105      	bne.n	80009f2 <__libc_init_array+0x2e>
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ec:	4798      	blx	r3
 80009ee:	3601      	adds	r6, #1
 80009f0:	e7ee      	b.n	80009d0 <__libc_init_array+0xc>
 80009f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f6:	4798      	blx	r3
 80009f8:	3601      	adds	r6, #1
 80009fa:	e7f2      	b.n	80009e2 <__libc_init_array+0x1e>
 80009fc:	080014e0 	.word	0x080014e0
 8000a00:	080014e0 	.word	0x080014e0
 8000a04:	080014e0 	.word	0x080014e0
 8000a08:	080014e4 	.word	0x080014e4

08000a0c <memset>:
 8000a0c:	4402      	add	r2, r0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d100      	bne.n	8000a16 <memset+0xa>
 8000a14:	4770      	bx	lr
 8000a16:	f803 1b01 	strb.w	r1, [r3], #1
 8000a1a:	e7f9      	b.n	8000a10 <memset+0x4>

08000a1c <_puts_r>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	460e      	mov	r6, r1
 8000a20:	4605      	mov	r5, r0
 8000a22:	b118      	cbz	r0, 8000a2c <_puts_r+0x10>
 8000a24:	6983      	ldr	r3, [r0, #24]
 8000a26:	b90b      	cbnz	r3, 8000a2c <_puts_r+0x10>
 8000a28:	f000 fa48 	bl	8000ebc <__sinit>
 8000a2c:	69ab      	ldr	r3, [r5, #24]
 8000a2e:	68ac      	ldr	r4, [r5, #8]
 8000a30:	b913      	cbnz	r3, 8000a38 <_puts_r+0x1c>
 8000a32:	4628      	mov	r0, r5
 8000a34:	f000 fa42 	bl	8000ebc <__sinit>
 8000a38:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <_puts_r+0xd0>)
 8000a3a:	429c      	cmp	r4, r3
 8000a3c:	d120      	bne.n	8000a80 <_puts_r+0x64>
 8000a3e:	686c      	ldr	r4, [r5, #4]
 8000a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a42:	07db      	lsls	r3, r3, #31
 8000a44:	d405      	bmi.n	8000a52 <_puts_r+0x36>
 8000a46:	89a3      	ldrh	r3, [r4, #12]
 8000a48:	0598      	lsls	r0, r3, #22
 8000a4a:	d402      	bmi.n	8000a52 <_puts_r+0x36>
 8000a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a4e:	f000 fad3 	bl	8000ff8 <__retarget_lock_acquire_recursive>
 8000a52:	89a3      	ldrh	r3, [r4, #12]
 8000a54:	0719      	lsls	r1, r3, #28
 8000a56:	d51d      	bpl.n	8000a94 <_puts_r+0x78>
 8000a58:	6923      	ldr	r3, [r4, #16]
 8000a5a:	b1db      	cbz	r3, 8000a94 <_puts_r+0x78>
 8000a5c:	3e01      	subs	r6, #1
 8000a5e:	68a3      	ldr	r3, [r4, #8]
 8000a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a64:	3b01      	subs	r3, #1
 8000a66:	60a3      	str	r3, [r4, #8]
 8000a68:	bb39      	cbnz	r1, 8000aba <_puts_r+0x9e>
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da38      	bge.n	8000ae0 <_puts_r+0xc4>
 8000a6e:	4622      	mov	r2, r4
 8000a70:	210a      	movs	r1, #10
 8000a72:	4628      	mov	r0, r5
 8000a74:	f000 f848 	bl	8000b08 <__swbuf_r>
 8000a78:	3001      	adds	r0, #1
 8000a7a:	d011      	beq.n	8000aa0 <_puts_r+0x84>
 8000a7c:	250a      	movs	r5, #10
 8000a7e:	e011      	b.n	8000aa4 <_puts_r+0x88>
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <_puts_r+0xd4>)
 8000a82:	429c      	cmp	r4, r3
 8000a84:	d101      	bne.n	8000a8a <_puts_r+0x6e>
 8000a86:	68ac      	ldr	r4, [r5, #8]
 8000a88:	e7da      	b.n	8000a40 <_puts_r+0x24>
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <_puts_r+0xd8>)
 8000a8c:	429c      	cmp	r4, r3
 8000a8e:	bf08      	it	eq
 8000a90:	68ec      	ldreq	r4, [r5, #12]
 8000a92:	e7d5      	b.n	8000a40 <_puts_r+0x24>
 8000a94:	4621      	mov	r1, r4
 8000a96:	4628      	mov	r0, r5
 8000a98:	f000 f888 	bl	8000bac <__swsetup_r>
 8000a9c:	2800      	cmp	r0, #0
 8000a9e:	d0dd      	beq.n	8000a5c <_puts_r+0x40>
 8000aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8000aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000aa6:	07da      	lsls	r2, r3, #31
 8000aa8:	d405      	bmi.n	8000ab6 <_puts_r+0x9a>
 8000aaa:	89a3      	ldrh	r3, [r4, #12]
 8000aac:	059b      	lsls	r3, r3, #22
 8000aae:	d402      	bmi.n	8000ab6 <_puts_r+0x9a>
 8000ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ab2:	f000 faa2 	bl	8000ffa <__retarget_lock_release_recursive>
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	bd70      	pop	{r4, r5, r6, pc}
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da04      	bge.n	8000ac8 <_puts_r+0xac>
 8000abe:	69a2      	ldr	r2, [r4, #24]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dc06      	bgt.n	8000ad2 <_puts_r+0xb6>
 8000ac4:	290a      	cmp	r1, #10
 8000ac6:	d004      	beq.n	8000ad2 <_puts_r+0xb6>
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	6022      	str	r2, [r4, #0]
 8000ace:	7019      	strb	r1, [r3, #0]
 8000ad0:	e7c5      	b.n	8000a5e <_puts_r+0x42>
 8000ad2:	4622      	mov	r2, r4
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	f000 f817 	bl	8000b08 <__swbuf_r>
 8000ada:	3001      	adds	r0, #1
 8000adc:	d1bf      	bne.n	8000a5e <_puts_r+0x42>
 8000ade:	e7df      	b.n	8000aa0 <_puts_r+0x84>
 8000ae0:	6823      	ldr	r3, [r4, #0]
 8000ae2:	250a      	movs	r5, #10
 8000ae4:	1c5a      	adds	r2, r3, #1
 8000ae6:	6022      	str	r2, [r4, #0]
 8000ae8:	701d      	strb	r5, [r3, #0]
 8000aea:	e7db      	b.n	8000aa4 <_puts_r+0x88>
 8000aec:	080014a0 	.word	0x080014a0
 8000af0:	080014c0 	.word	0x080014c0
 8000af4:	08001480 	.word	0x08001480

08000af8 <puts>:
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <puts+0xc>)
 8000afa:	4601      	mov	r1, r0
 8000afc:	6818      	ldr	r0, [r3, #0]
 8000afe:	f7ff bf8d 	b.w	8000a1c <_puts_r>
 8000b02:	bf00      	nop
 8000b04:	20000004 	.word	0x20000004

08000b08 <__swbuf_r>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	460e      	mov	r6, r1
 8000b0c:	4614      	mov	r4, r2
 8000b0e:	4605      	mov	r5, r0
 8000b10:	b118      	cbz	r0, 8000b1a <__swbuf_r+0x12>
 8000b12:	6983      	ldr	r3, [r0, #24]
 8000b14:	b90b      	cbnz	r3, 8000b1a <__swbuf_r+0x12>
 8000b16:	f000 f9d1 	bl	8000ebc <__sinit>
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <__swbuf_r+0x98>)
 8000b1c:	429c      	cmp	r4, r3
 8000b1e:	d12b      	bne.n	8000b78 <__swbuf_r+0x70>
 8000b20:	686c      	ldr	r4, [r5, #4]
 8000b22:	69a3      	ldr	r3, [r4, #24]
 8000b24:	60a3      	str	r3, [r4, #8]
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	071a      	lsls	r2, r3, #28
 8000b2a:	d52f      	bpl.n	8000b8c <__swbuf_r+0x84>
 8000b2c:	6923      	ldr	r3, [r4, #16]
 8000b2e:	b36b      	cbz	r3, 8000b8c <__swbuf_r+0x84>
 8000b30:	6923      	ldr	r3, [r4, #16]
 8000b32:	6820      	ldr	r0, [r4, #0]
 8000b34:	1ac0      	subs	r0, r0, r3
 8000b36:	6963      	ldr	r3, [r4, #20]
 8000b38:	b2f6      	uxtb	r6, r6
 8000b3a:	4283      	cmp	r3, r0
 8000b3c:	4637      	mov	r7, r6
 8000b3e:	dc04      	bgt.n	8000b4a <__swbuf_r+0x42>
 8000b40:	4621      	mov	r1, r4
 8000b42:	4628      	mov	r0, r5
 8000b44:	f000 f926 	bl	8000d94 <_fflush_r>
 8000b48:	bb30      	cbnz	r0, 8000b98 <__swbuf_r+0x90>
 8000b4a:	68a3      	ldr	r3, [r4, #8]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	60a3      	str	r3, [r4, #8]
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	6022      	str	r2, [r4, #0]
 8000b56:	701e      	strb	r6, [r3, #0]
 8000b58:	6963      	ldr	r3, [r4, #20]
 8000b5a:	3001      	adds	r0, #1
 8000b5c:	4283      	cmp	r3, r0
 8000b5e:	d004      	beq.n	8000b6a <__swbuf_r+0x62>
 8000b60:	89a3      	ldrh	r3, [r4, #12]
 8000b62:	07db      	lsls	r3, r3, #31
 8000b64:	d506      	bpl.n	8000b74 <__swbuf_r+0x6c>
 8000b66:	2e0a      	cmp	r6, #10
 8000b68:	d104      	bne.n	8000b74 <__swbuf_r+0x6c>
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f000 f911 	bl	8000d94 <_fflush_r>
 8000b72:	b988      	cbnz	r0, 8000b98 <__swbuf_r+0x90>
 8000b74:	4638      	mov	r0, r7
 8000b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <__swbuf_r+0x9c>)
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	d101      	bne.n	8000b82 <__swbuf_r+0x7a>
 8000b7e:	68ac      	ldr	r4, [r5, #8]
 8000b80:	e7cf      	b.n	8000b22 <__swbuf_r+0x1a>
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <__swbuf_r+0xa0>)
 8000b84:	429c      	cmp	r4, r3
 8000b86:	bf08      	it	eq
 8000b88:	68ec      	ldreq	r4, [r5, #12]
 8000b8a:	e7ca      	b.n	8000b22 <__swbuf_r+0x1a>
 8000b8c:	4621      	mov	r1, r4
 8000b8e:	4628      	mov	r0, r5
 8000b90:	f000 f80c 	bl	8000bac <__swsetup_r>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d0cb      	beq.n	8000b30 <__swbuf_r+0x28>
 8000b98:	f04f 37ff 	mov.w	r7, #4294967295
 8000b9c:	e7ea      	b.n	8000b74 <__swbuf_r+0x6c>
 8000b9e:	bf00      	nop
 8000ba0:	080014a0 	.word	0x080014a0
 8000ba4:	080014c0 	.word	0x080014c0
 8000ba8:	08001480 	.word	0x08001480

08000bac <__swsetup_r>:
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <__swsetup_r+0xcc>)
 8000bae:	b570      	push	{r4, r5, r6, lr}
 8000bb0:	681d      	ldr	r5, [r3, #0]
 8000bb2:	4606      	mov	r6, r0
 8000bb4:	460c      	mov	r4, r1
 8000bb6:	b125      	cbz	r5, 8000bc2 <__swsetup_r+0x16>
 8000bb8:	69ab      	ldr	r3, [r5, #24]
 8000bba:	b913      	cbnz	r3, 8000bc2 <__swsetup_r+0x16>
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	f000 f97d 	bl	8000ebc <__sinit>
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <__swsetup_r+0xd0>)
 8000bc4:	429c      	cmp	r4, r3
 8000bc6:	d10f      	bne.n	8000be8 <__swsetup_r+0x3c>
 8000bc8:	686c      	ldr	r4, [r5, #4]
 8000bca:	89a3      	ldrh	r3, [r4, #12]
 8000bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bd0:	0719      	lsls	r1, r3, #28
 8000bd2:	d42c      	bmi.n	8000c2e <__swsetup_r+0x82>
 8000bd4:	06dd      	lsls	r5, r3, #27
 8000bd6:	d411      	bmi.n	8000bfc <__swsetup_r+0x50>
 8000bd8:	2309      	movs	r3, #9
 8000bda:	6033      	str	r3, [r6, #0]
 8000bdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000be0:	81a3      	strh	r3, [r4, #12]
 8000be2:	f04f 30ff 	mov.w	r0, #4294967295
 8000be6:	e03e      	b.n	8000c66 <__swsetup_r+0xba>
 8000be8:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <__swsetup_r+0xd4>)
 8000bea:	429c      	cmp	r4, r3
 8000bec:	d101      	bne.n	8000bf2 <__swsetup_r+0x46>
 8000bee:	68ac      	ldr	r4, [r5, #8]
 8000bf0:	e7eb      	b.n	8000bca <__swsetup_r+0x1e>
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <__swsetup_r+0xd8>)
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	bf08      	it	eq
 8000bf8:	68ec      	ldreq	r4, [r5, #12]
 8000bfa:	e7e6      	b.n	8000bca <__swsetup_r+0x1e>
 8000bfc:	0758      	lsls	r0, r3, #29
 8000bfe:	d512      	bpl.n	8000c26 <__swsetup_r+0x7a>
 8000c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c02:	b141      	cbz	r1, 8000c16 <__swsetup_r+0x6a>
 8000c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d002      	beq.n	8000c12 <__swsetup_r+0x66>
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	f000 fa5b 	bl	80010c8 <_free_r>
 8000c12:	2300      	movs	r3, #0
 8000c14:	6363      	str	r3, [r4, #52]	; 0x34
 8000c16:	89a3      	ldrh	r3, [r4, #12]
 8000c18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c1c:	81a3      	strh	r3, [r4, #12]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	6063      	str	r3, [r4, #4]
 8000c22:	6923      	ldr	r3, [r4, #16]
 8000c24:	6023      	str	r3, [r4, #0]
 8000c26:	89a3      	ldrh	r3, [r4, #12]
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	81a3      	strh	r3, [r4, #12]
 8000c2e:	6923      	ldr	r3, [r4, #16]
 8000c30:	b94b      	cbnz	r3, 8000c46 <__swsetup_r+0x9a>
 8000c32:	89a3      	ldrh	r3, [r4, #12]
 8000c34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c3c:	d003      	beq.n	8000c46 <__swsetup_r+0x9a>
 8000c3e:	4621      	mov	r1, r4
 8000c40:	4630      	mov	r0, r6
 8000c42:	f000 fa01 	bl	8001048 <__smakebuf_r>
 8000c46:	89a0      	ldrh	r0, [r4, #12]
 8000c48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c4c:	f010 0301 	ands.w	r3, r0, #1
 8000c50:	d00a      	beq.n	8000c68 <__swsetup_r+0xbc>
 8000c52:	2300      	movs	r3, #0
 8000c54:	60a3      	str	r3, [r4, #8]
 8000c56:	6963      	ldr	r3, [r4, #20]
 8000c58:	425b      	negs	r3, r3
 8000c5a:	61a3      	str	r3, [r4, #24]
 8000c5c:	6923      	ldr	r3, [r4, #16]
 8000c5e:	b943      	cbnz	r3, 8000c72 <__swsetup_r+0xc6>
 8000c60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c64:	d1ba      	bne.n	8000bdc <__swsetup_r+0x30>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	0781      	lsls	r1, r0, #30
 8000c6a:	bf58      	it	pl
 8000c6c:	6963      	ldrpl	r3, [r4, #20]
 8000c6e:	60a3      	str	r3, [r4, #8]
 8000c70:	e7f4      	b.n	8000c5c <__swsetup_r+0xb0>
 8000c72:	2000      	movs	r0, #0
 8000c74:	e7f7      	b.n	8000c66 <__swsetup_r+0xba>
 8000c76:	bf00      	nop
 8000c78:	20000004 	.word	0x20000004
 8000c7c:	080014a0 	.word	0x080014a0
 8000c80:	080014c0 	.word	0x080014c0
 8000c84:	08001480 	.word	0x08001480

08000c88 <__sflush_r>:
 8000c88:	898a      	ldrh	r2, [r1, #12]
 8000c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c8e:	4605      	mov	r5, r0
 8000c90:	0710      	lsls	r0, r2, #28
 8000c92:	460c      	mov	r4, r1
 8000c94:	d458      	bmi.n	8000d48 <__sflush_r+0xc0>
 8000c96:	684b      	ldr	r3, [r1, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	dc05      	bgt.n	8000ca8 <__sflush_r+0x20>
 8000c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	dc02      	bgt.n	8000ca8 <__sflush_r+0x20>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0f9      	beq.n	8000ca2 <__sflush_r+0x1a>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000cb4:	682f      	ldr	r7, [r5, #0]
 8000cb6:	602b      	str	r3, [r5, #0]
 8000cb8:	d032      	beq.n	8000d20 <__sflush_r+0x98>
 8000cba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	075a      	lsls	r2, r3, #29
 8000cc0:	d505      	bpl.n	8000cce <__sflush_r+0x46>
 8000cc2:	6863      	ldr	r3, [r4, #4]
 8000cc4:	1ac0      	subs	r0, r0, r3
 8000cc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cc8:	b10b      	cbz	r3, 8000cce <__sflush_r+0x46>
 8000cca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ccc:	1ac0      	subs	r0, r0, r3
 8000cce:	2300      	movs	r3, #0
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cd4:	6a21      	ldr	r1, [r4, #32]
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	47b0      	blx	r6
 8000cda:	1c43      	adds	r3, r0, #1
 8000cdc:	89a3      	ldrh	r3, [r4, #12]
 8000cde:	d106      	bne.n	8000cee <__sflush_r+0x66>
 8000ce0:	6829      	ldr	r1, [r5, #0]
 8000ce2:	291d      	cmp	r1, #29
 8000ce4:	d82c      	bhi.n	8000d40 <__sflush_r+0xb8>
 8000ce6:	4a2a      	ldr	r2, [pc, #168]	; (8000d90 <__sflush_r+0x108>)
 8000ce8:	40ca      	lsrs	r2, r1
 8000cea:	07d6      	lsls	r6, r2, #31
 8000cec:	d528      	bpl.n	8000d40 <__sflush_r+0xb8>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6062      	str	r2, [r4, #4]
 8000cf2:	04d9      	lsls	r1, r3, #19
 8000cf4:	6922      	ldr	r2, [r4, #16]
 8000cf6:	6022      	str	r2, [r4, #0]
 8000cf8:	d504      	bpl.n	8000d04 <__sflush_r+0x7c>
 8000cfa:	1c42      	adds	r2, r0, #1
 8000cfc:	d101      	bne.n	8000d02 <__sflush_r+0x7a>
 8000cfe:	682b      	ldr	r3, [r5, #0]
 8000d00:	b903      	cbnz	r3, 8000d04 <__sflush_r+0x7c>
 8000d02:	6560      	str	r0, [r4, #84]	; 0x54
 8000d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d06:	602f      	str	r7, [r5, #0]
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d0ca      	beq.n	8000ca2 <__sflush_r+0x1a>
 8000d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d002      	beq.n	8000d1a <__sflush_r+0x92>
 8000d14:	4628      	mov	r0, r5
 8000d16:	f000 f9d7 	bl	80010c8 <_free_r>
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	6360      	str	r0, [r4, #52]	; 0x34
 8000d1e:	e7c1      	b.n	8000ca4 <__sflush_r+0x1c>
 8000d20:	6a21      	ldr	r1, [r4, #32]
 8000d22:	2301      	movs	r3, #1
 8000d24:	4628      	mov	r0, r5
 8000d26:	47b0      	blx	r6
 8000d28:	1c41      	adds	r1, r0, #1
 8000d2a:	d1c7      	bne.n	8000cbc <__sflush_r+0x34>
 8000d2c:	682b      	ldr	r3, [r5, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0c4      	beq.n	8000cbc <__sflush_r+0x34>
 8000d32:	2b1d      	cmp	r3, #29
 8000d34:	d001      	beq.n	8000d3a <__sflush_r+0xb2>
 8000d36:	2b16      	cmp	r3, #22
 8000d38:	d101      	bne.n	8000d3e <__sflush_r+0xb6>
 8000d3a:	602f      	str	r7, [r5, #0]
 8000d3c:	e7b1      	b.n	8000ca2 <__sflush_r+0x1a>
 8000d3e:	89a3      	ldrh	r3, [r4, #12]
 8000d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d44:	81a3      	strh	r3, [r4, #12]
 8000d46:	e7ad      	b.n	8000ca4 <__sflush_r+0x1c>
 8000d48:	690f      	ldr	r7, [r1, #16]
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d0a9      	beq.n	8000ca2 <__sflush_r+0x1a>
 8000d4e:	0793      	lsls	r3, r2, #30
 8000d50:	680e      	ldr	r6, [r1, #0]
 8000d52:	bf08      	it	eq
 8000d54:	694b      	ldreq	r3, [r1, #20]
 8000d56:	600f      	str	r7, [r1, #0]
 8000d58:	bf18      	it	ne
 8000d5a:	2300      	movne	r3, #0
 8000d5c:	eba6 0807 	sub.w	r8, r6, r7
 8000d60:	608b      	str	r3, [r1, #8]
 8000d62:	f1b8 0f00 	cmp.w	r8, #0
 8000d66:	dd9c      	ble.n	8000ca2 <__sflush_r+0x1a>
 8000d68:	6a21      	ldr	r1, [r4, #32]
 8000d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d6c:	4643      	mov	r3, r8
 8000d6e:	463a      	mov	r2, r7
 8000d70:	4628      	mov	r0, r5
 8000d72:	47b0      	blx	r6
 8000d74:	2800      	cmp	r0, #0
 8000d76:	dc06      	bgt.n	8000d86 <__sflush_r+0xfe>
 8000d78:	89a3      	ldrh	r3, [r4, #12]
 8000d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7e:	81a3      	strh	r3, [r4, #12]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	e78e      	b.n	8000ca4 <__sflush_r+0x1c>
 8000d86:	4407      	add	r7, r0
 8000d88:	eba8 0800 	sub.w	r8, r8, r0
 8000d8c:	e7e9      	b.n	8000d62 <__sflush_r+0xda>
 8000d8e:	bf00      	nop
 8000d90:	20400001 	.word	0x20400001

08000d94 <_fflush_r>:
 8000d94:	b538      	push	{r3, r4, r5, lr}
 8000d96:	690b      	ldr	r3, [r1, #16]
 8000d98:	4605      	mov	r5, r0
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	b913      	cbnz	r3, 8000da4 <_fflush_r+0x10>
 8000d9e:	2500      	movs	r5, #0
 8000da0:	4628      	mov	r0, r5
 8000da2:	bd38      	pop	{r3, r4, r5, pc}
 8000da4:	b118      	cbz	r0, 8000dae <_fflush_r+0x1a>
 8000da6:	6983      	ldr	r3, [r0, #24]
 8000da8:	b90b      	cbnz	r3, 8000dae <_fflush_r+0x1a>
 8000daa:	f000 f887 	bl	8000ebc <__sinit>
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <_fflush_r+0x6c>)
 8000db0:	429c      	cmp	r4, r3
 8000db2:	d11b      	bne.n	8000dec <_fflush_r+0x58>
 8000db4:	686c      	ldr	r4, [r5, #4]
 8000db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0ef      	beq.n	8000d9e <_fflush_r+0xa>
 8000dbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000dc0:	07d0      	lsls	r0, r2, #31
 8000dc2:	d404      	bmi.n	8000dce <_fflush_r+0x3a>
 8000dc4:	0599      	lsls	r1, r3, #22
 8000dc6:	d402      	bmi.n	8000dce <_fflush_r+0x3a>
 8000dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dca:	f000 f915 	bl	8000ff8 <__retarget_lock_acquire_recursive>
 8000dce:	4628      	mov	r0, r5
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	f7ff ff59 	bl	8000c88 <__sflush_r>
 8000dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dd8:	07da      	lsls	r2, r3, #31
 8000dda:	4605      	mov	r5, r0
 8000ddc:	d4e0      	bmi.n	8000da0 <_fflush_r+0xc>
 8000dde:	89a3      	ldrh	r3, [r4, #12]
 8000de0:	059b      	lsls	r3, r3, #22
 8000de2:	d4dd      	bmi.n	8000da0 <_fflush_r+0xc>
 8000de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000de6:	f000 f908 	bl	8000ffa <__retarget_lock_release_recursive>
 8000dea:	e7d9      	b.n	8000da0 <_fflush_r+0xc>
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <_fflush_r+0x70>)
 8000dee:	429c      	cmp	r4, r3
 8000df0:	d101      	bne.n	8000df6 <_fflush_r+0x62>
 8000df2:	68ac      	ldr	r4, [r5, #8]
 8000df4:	e7df      	b.n	8000db6 <_fflush_r+0x22>
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <_fflush_r+0x74>)
 8000df8:	429c      	cmp	r4, r3
 8000dfa:	bf08      	it	eq
 8000dfc:	68ec      	ldreq	r4, [r5, #12]
 8000dfe:	e7da      	b.n	8000db6 <_fflush_r+0x22>
 8000e00:	080014a0 	.word	0x080014a0
 8000e04:	080014c0 	.word	0x080014c0
 8000e08:	08001480 	.word	0x08001480

08000e0c <std>:
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	b510      	push	{r4, lr}
 8000e10:	4604      	mov	r4, r0
 8000e12:	e9c0 3300 	strd	r3, r3, [r0]
 8000e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e1a:	6083      	str	r3, [r0, #8]
 8000e1c:	8181      	strh	r1, [r0, #12]
 8000e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8000e20:	81c2      	strh	r2, [r0, #14]
 8000e22:	6183      	str	r3, [r0, #24]
 8000e24:	4619      	mov	r1, r3
 8000e26:	2208      	movs	r2, #8
 8000e28:	305c      	adds	r0, #92	; 0x5c
 8000e2a:	f7ff fdef 	bl	8000a0c <memset>
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <std+0x38>)
 8000e30:	6263      	str	r3, [r4, #36]	; 0x24
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <std+0x3c>)
 8000e34:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <std+0x40>)
 8000e38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <std+0x44>)
 8000e3c:	6224      	str	r4, [r4, #32]
 8000e3e:	6323      	str	r3, [r4, #48]	; 0x30
 8000e40:	bd10      	pop	{r4, pc}
 8000e42:	bf00      	nop
 8000e44:	080012a9 	.word	0x080012a9
 8000e48:	080012cb 	.word	0x080012cb
 8000e4c:	08001303 	.word	0x08001303
 8000e50:	08001327 	.word	0x08001327

08000e54 <_cleanup_r>:
 8000e54:	4901      	ldr	r1, [pc, #4]	; (8000e5c <_cleanup_r+0x8>)
 8000e56:	f000 b8af 	b.w	8000fb8 <_fwalk_reent>
 8000e5a:	bf00      	nop
 8000e5c:	08000d95 	.word	0x08000d95

08000e60 <__sfmoreglue>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	2268      	movs	r2, #104	; 0x68
 8000e64:	1e4d      	subs	r5, r1, #1
 8000e66:	4355      	muls	r5, r2
 8000e68:	460e      	mov	r6, r1
 8000e6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e6e:	f000 f997 	bl	80011a0 <_malloc_r>
 8000e72:	4604      	mov	r4, r0
 8000e74:	b140      	cbz	r0, 8000e88 <__sfmoreglue+0x28>
 8000e76:	2100      	movs	r1, #0
 8000e78:	e9c0 1600 	strd	r1, r6, [r0]
 8000e7c:	300c      	adds	r0, #12
 8000e7e:	60a0      	str	r0, [r4, #8]
 8000e80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e84:	f7ff fdc2 	bl	8000a0c <memset>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}

08000e8c <__sfp_lock_acquire>:
 8000e8c:	4801      	ldr	r0, [pc, #4]	; (8000e94 <__sfp_lock_acquire+0x8>)
 8000e8e:	f000 b8b3 	b.w	8000ff8 <__retarget_lock_acquire_recursive>
 8000e92:	bf00      	nop
 8000e94:	200000dd 	.word	0x200000dd

08000e98 <__sfp_lock_release>:
 8000e98:	4801      	ldr	r0, [pc, #4]	; (8000ea0 <__sfp_lock_release+0x8>)
 8000e9a:	f000 b8ae 	b.w	8000ffa <__retarget_lock_release_recursive>
 8000e9e:	bf00      	nop
 8000ea0:	200000dd 	.word	0x200000dd

08000ea4 <__sinit_lock_acquire>:
 8000ea4:	4801      	ldr	r0, [pc, #4]	; (8000eac <__sinit_lock_acquire+0x8>)
 8000ea6:	f000 b8a7 	b.w	8000ff8 <__retarget_lock_acquire_recursive>
 8000eaa:	bf00      	nop
 8000eac:	200000de 	.word	0x200000de

08000eb0 <__sinit_lock_release>:
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <__sinit_lock_release+0x8>)
 8000eb2:	f000 b8a2 	b.w	8000ffa <__retarget_lock_release_recursive>
 8000eb6:	bf00      	nop
 8000eb8:	200000de 	.word	0x200000de

08000ebc <__sinit>:
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	f7ff fff0 	bl	8000ea4 <__sinit_lock_acquire>
 8000ec4:	69a3      	ldr	r3, [r4, #24]
 8000ec6:	b11b      	cbz	r3, 8000ed0 <__sinit+0x14>
 8000ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ecc:	f7ff bff0 	b.w	8000eb0 <__sinit_lock_release>
 8000ed0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ed4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <__sinit+0x68>)
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <__sinit+0x6c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	bf04      	itt	eq
 8000ee2:	2301      	moveq	r3, #1
 8000ee4:	61a3      	streq	r3, [r4, #24]
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f000 f820 	bl	8000f2c <__sfp>
 8000eec:	6060      	str	r0, [r4, #4]
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f000 f81c 	bl	8000f2c <__sfp>
 8000ef4:	60a0      	str	r0, [r4, #8]
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 f818 	bl	8000f2c <__sfp>
 8000efc:	2200      	movs	r2, #0
 8000efe:	60e0      	str	r0, [r4, #12]
 8000f00:	2104      	movs	r1, #4
 8000f02:	6860      	ldr	r0, [r4, #4]
 8000f04:	f7ff ff82 	bl	8000e0c <std>
 8000f08:	68a0      	ldr	r0, [r4, #8]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2109      	movs	r1, #9
 8000f0e:	f7ff ff7d 	bl	8000e0c <std>
 8000f12:	68e0      	ldr	r0, [r4, #12]
 8000f14:	2202      	movs	r2, #2
 8000f16:	2112      	movs	r1, #18
 8000f18:	f7ff ff78 	bl	8000e0c <std>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61a3      	str	r3, [r4, #24]
 8000f20:	e7d2      	b.n	8000ec8 <__sinit+0xc>
 8000f22:	bf00      	nop
 8000f24:	0800147c 	.word	0x0800147c
 8000f28:	08000e55 	.word	0x08000e55

08000f2c <__sfp>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	4607      	mov	r7, r0
 8000f30:	f7ff ffac 	bl	8000e8c <__sfp_lock_acquire>
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <__sfp+0x84>)
 8000f36:	681e      	ldr	r6, [r3, #0]
 8000f38:	69b3      	ldr	r3, [r6, #24]
 8000f3a:	b913      	cbnz	r3, 8000f42 <__sfp+0x16>
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	f7ff ffbd 	bl	8000ebc <__sinit>
 8000f42:	3648      	adds	r6, #72	; 0x48
 8000f44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	d503      	bpl.n	8000f54 <__sfp+0x28>
 8000f4c:	6833      	ldr	r3, [r6, #0]
 8000f4e:	b30b      	cbz	r3, 8000f94 <__sfp+0x68>
 8000f50:	6836      	ldr	r6, [r6, #0]
 8000f52:	e7f7      	b.n	8000f44 <__sfp+0x18>
 8000f54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f58:	b9d5      	cbnz	r5, 8000f90 <__sfp+0x64>
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <__sfp+0x88>)
 8000f5c:	60e3      	str	r3, [r4, #12]
 8000f5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f62:	6665      	str	r5, [r4, #100]	; 0x64
 8000f64:	f000 f847 	bl	8000ff6 <__retarget_lock_init_recursive>
 8000f68:	f7ff ff96 	bl	8000e98 <__sfp_lock_release>
 8000f6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f74:	6025      	str	r5, [r4, #0]
 8000f76:	61a5      	str	r5, [r4, #24]
 8000f78:	2208      	movs	r2, #8
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f80:	f7ff fd44 	bl	8000a0c <memset>
 8000f84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f90:	3468      	adds	r4, #104	; 0x68
 8000f92:	e7d9      	b.n	8000f48 <__sfp+0x1c>
 8000f94:	2104      	movs	r1, #4
 8000f96:	4638      	mov	r0, r7
 8000f98:	f7ff ff62 	bl	8000e60 <__sfmoreglue>
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	6030      	str	r0, [r6, #0]
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d1d5      	bne.n	8000f50 <__sfp+0x24>
 8000fa4:	f7ff ff78 	bl	8000e98 <__sfp_lock_release>
 8000fa8:	230c      	movs	r3, #12
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	e7ee      	b.n	8000f8c <__sfp+0x60>
 8000fae:	bf00      	nop
 8000fb0:	0800147c 	.word	0x0800147c
 8000fb4:	ffff0001 	.word	0xffff0001

08000fb8 <_fwalk_reent>:
 8000fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	4688      	mov	r8, r1
 8000fc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fc4:	2700      	movs	r7, #0
 8000fc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fca:	f1b9 0901 	subs.w	r9, r9, #1
 8000fce:	d505      	bpl.n	8000fdc <_fwalk_reent+0x24>
 8000fd0:	6824      	ldr	r4, [r4, #0]
 8000fd2:	2c00      	cmp	r4, #0
 8000fd4:	d1f7      	bne.n	8000fc6 <_fwalk_reent+0xe>
 8000fd6:	4638      	mov	r0, r7
 8000fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fdc:	89ab      	ldrh	r3, [r5, #12]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d907      	bls.n	8000ff2 <_fwalk_reent+0x3a>
 8000fe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	d003      	beq.n	8000ff2 <_fwalk_reent+0x3a>
 8000fea:	4629      	mov	r1, r5
 8000fec:	4630      	mov	r0, r6
 8000fee:	47c0      	blx	r8
 8000ff0:	4307      	orrs	r7, r0
 8000ff2:	3568      	adds	r5, #104	; 0x68
 8000ff4:	e7e9      	b.n	8000fca <_fwalk_reent+0x12>

08000ff6 <__retarget_lock_init_recursive>:
 8000ff6:	4770      	bx	lr

08000ff8 <__retarget_lock_acquire_recursive>:
 8000ff8:	4770      	bx	lr

08000ffa <__retarget_lock_release_recursive>:
 8000ffa:	4770      	bx	lr

08000ffc <__swhatbuf_r>:
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	460e      	mov	r6, r1
 8001000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001004:	2900      	cmp	r1, #0
 8001006:	b096      	sub	sp, #88	; 0x58
 8001008:	4614      	mov	r4, r2
 800100a:	461d      	mov	r5, r3
 800100c:	da08      	bge.n	8001020 <__swhatbuf_r+0x24>
 800100e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	602a      	str	r2, [r5, #0]
 8001016:	061a      	lsls	r2, r3, #24
 8001018:	d410      	bmi.n	800103c <__swhatbuf_r+0x40>
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	e00e      	b.n	800103e <__swhatbuf_r+0x42>
 8001020:	466a      	mov	r2, sp
 8001022:	f000 f9a7 	bl	8001374 <_fstat_r>
 8001026:	2800      	cmp	r0, #0
 8001028:	dbf1      	blt.n	800100e <__swhatbuf_r+0x12>
 800102a:	9a01      	ldr	r2, [sp, #4]
 800102c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001030:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001034:	425a      	negs	r2, r3
 8001036:	415a      	adcs	r2, r3
 8001038:	602a      	str	r2, [r5, #0]
 800103a:	e7ee      	b.n	800101a <__swhatbuf_r+0x1e>
 800103c:	2340      	movs	r3, #64	; 0x40
 800103e:	2000      	movs	r0, #0
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	b016      	add	sp, #88	; 0x58
 8001044:	bd70      	pop	{r4, r5, r6, pc}
	...

08001048 <__smakebuf_r>:
 8001048:	898b      	ldrh	r3, [r1, #12]
 800104a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800104c:	079d      	lsls	r5, r3, #30
 800104e:	4606      	mov	r6, r0
 8001050:	460c      	mov	r4, r1
 8001052:	d507      	bpl.n	8001064 <__smakebuf_r+0x1c>
 8001054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	6123      	str	r3, [r4, #16]
 800105c:	2301      	movs	r3, #1
 800105e:	6163      	str	r3, [r4, #20]
 8001060:	b002      	add	sp, #8
 8001062:	bd70      	pop	{r4, r5, r6, pc}
 8001064:	ab01      	add	r3, sp, #4
 8001066:	466a      	mov	r2, sp
 8001068:	f7ff ffc8 	bl	8000ffc <__swhatbuf_r>
 800106c:	9900      	ldr	r1, [sp, #0]
 800106e:	4605      	mov	r5, r0
 8001070:	4630      	mov	r0, r6
 8001072:	f000 f895 	bl	80011a0 <_malloc_r>
 8001076:	b948      	cbnz	r0, 800108c <__smakebuf_r+0x44>
 8001078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800107c:	059a      	lsls	r2, r3, #22
 800107e:	d4ef      	bmi.n	8001060 <__smakebuf_r+0x18>
 8001080:	f023 0303 	bic.w	r3, r3, #3
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	81a3      	strh	r3, [r4, #12]
 800108a:	e7e3      	b.n	8001054 <__smakebuf_r+0xc>
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <__smakebuf_r+0x7c>)
 800108e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001090:	89a3      	ldrh	r3, [r4, #12]
 8001092:	6020      	str	r0, [r4, #0]
 8001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001098:	81a3      	strh	r3, [r4, #12]
 800109a:	9b00      	ldr	r3, [sp, #0]
 800109c:	6163      	str	r3, [r4, #20]
 800109e:	9b01      	ldr	r3, [sp, #4]
 80010a0:	6120      	str	r0, [r4, #16]
 80010a2:	b15b      	cbz	r3, 80010bc <__smakebuf_r+0x74>
 80010a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010a8:	4630      	mov	r0, r6
 80010aa:	f000 f975 	bl	8001398 <_isatty_r>
 80010ae:	b128      	cbz	r0, 80010bc <__smakebuf_r+0x74>
 80010b0:	89a3      	ldrh	r3, [r4, #12]
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	81a3      	strh	r3, [r4, #12]
 80010bc:	89a0      	ldrh	r0, [r4, #12]
 80010be:	4305      	orrs	r5, r0
 80010c0:	81a5      	strh	r5, [r4, #12]
 80010c2:	e7cd      	b.n	8001060 <__smakebuf_r+0x18>
 80010c4:	08000e55 	.word	0x08000e55

080010c8 <_free_r>:
 80010c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010ca:	2900      	cmp	r1, #0
 80010cc:	d044      	beq.n	8001158 <_free_r+0x90>
 80010ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010d2:	9001      	str	r0, [sp, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f1a1 0404 	sub.w	r4, r1, #4
 80010da:	bfb8      	it	lt
 80010dc:	18e4      	addlt	r4, r4, r3
 80010de:	f000 f97d 	bl	80013dc <__malloc_lock>
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <_free_r+0x94>)
 80010e4:	9801      	ldr	r0, [sp, #4]
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	b933      	cbnz	r3, 80010f8 <_free_r+0x30>
 80010ea:	6063      	str	r3, [r4, #4]
 80010ec:	6014      	str	r4, [r2, #0]
 80010ee:	b003      	add	sp, #12
 80010f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010f4:	f000 b978 	b.w	80013e8 <__malloc_unlock>
 80010f8:	42a3      	cmp	r3, r4
 80010fa:	d908      	bls.n	800110e <_free_r+0x46>
 80010fc:	6825      	ldr	r5, [r4, #0]
 80010fe:	1961      	adds	r1, r4, r5
 8001100:	428b      	cmp	r3, r1
 8001102:	bf01      	itttt	eq
 8001104:	6819      	ldreq	r1, [r3, #0]
 8001106:	685b      	ldreq	r3, [r3, #4]
 8001108:	1949      	addeq	r1, r1, r5
 800110a:	6021      	streq	r1, [r4, #0]
 800110c:	e7ed      	b.n	80010ea <_free_r+0x22>
 800110e:	461a      	mov	r2, r3
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	b10b      	cbz	r3, 8001118 <_free_r+0x50>
 8001114:	42a3      	cmp	r3, r4
 8001116:	d9fa      	bls.n	800110e <_free_r+0x46>
 8001118:	6811      	ldr	r1, [r2, #0]
 800111a:	1855      	adds	r5, r2, r1
 800111c:	42a5      	cmp	r5, r4
 800111e:	d10b      	bne.n	8001138 <_free_r+0x70>
 8001120:	6824      	ldr	r4, [r4, #0]
 8001122:	4421      	add	r1, r4
 8001124:	1854      	adds	r4, r2, r1
 8001126:	42a3      	cmp	r3, r4
 8001128:	6011      	str	r1, [r2, #0]
 800112a:	d1e0      	bne.n	80010ee <_free_r+0x26>
 800112c:	681c      	ldr	r4, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	6053      	str	r3, [r2, #4]
 8001132:	4421      	add	r1, r4
 8001134:	6011      	str	r1, [r2, #0]
 8001136:	e7da      	b.n	80010ee <_free_r+0x26>
 8001138:	d902      	bls.n	8001140 <_free_r+0x78>
 800113a:	230c      	movs	r3, #12
 800113c:	6003      	str	r3, [r0, #0]
 800113e:	e7d6      	b.n	80010ee <_free_r+0x26>
 8001140:	6825      	ldr	r5, [r4, #0]
 8001142:	1961      	adds	r1, r4, r5
 8001144:	428b      	cmp	r3, r1
 8001146:	bf04      	itt	eq
 8001148:	6819      	ldreq	r1, [r3, #0]
 800114a:	685b      	ldreq	r3, [r3, #4]
 800114c:	6063      	str	r3, [r4, #4]
 800114e:	bf04      	itt	eq
 8001150:	1949      	addeq	r1, r1, r5
 8001152:	6021      	streq	r1, [r4, #0]
 8001154:	6054      	str	r4, [r2, #4]
 8001156:	e7ca      	b.n	80010ee <_free_r+0x26>
 8001158:	b003      	add	sp, #12
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	200000e0 	.word	0x200000e0

08001160 <sbrk_aligned>:
 8001160:	b570      	push	{r4, r5, r6, lr}
 8001162:	4e0e      	ldr	r6, [pc, #56]	; (800119c <sbrk_aligned+0x3c>)
 8001164:	460c      	mov	r4, r1
 8001166:	6831      	ldr	r1, [r6, #0]
 8001168:	4605      	mov	r5, r0
 800116a:	b911      	cbnz	r1, 8001172 <sbrk_aligned+0x12>
 800116c:	f000 f88c 	bl	8001288 <_sbrk_r>
 8001170:	6030      	str	r0, [r6, #0]
 8001172:	4621      	mov	r1, r4
 8001174:	4628      	mov	r0, r5
 8001176:	f000 f887 	bl	8001288 <_sbrk_r>
 800117a:	1c43      	adds	r3, r0, #1
 800117c:	d00a      	beq.n	8001194 <sbrk_aligned+0x34>
 800117e:	1cc4      	adds	r4, r0, #3
 8001180:	f024 0403 	bic.w	r4, r4, #3
 8001184:	42a0      	cmp	r0, r4
 8001186:	d007      	beq.n	8001198 <sbrk_aligned+0x38>
 8001188:	1a21      	subs	r1, r4, r0
 800118a:	4628      	mov	r0, r5
 800118c:	f000 f87c 	bl	8001288 <_sbrk_r>
 8001190:	3001      	adds	r0, #1
 8001192:	d101      	bne.n	8001198 <sbrk_aligned+0x38>
 8001194:	f04f 34ff 	mov.w	r4, #4294967295
 8001198:	4620      	mov	r0, r4
 800119a:	bd70      	pop	{r4, r5, r6, pc}
 800119c:	200000e4 	.word	0x200000e4

080011a0 <_malloc_r>:
 80011a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a4:	1ccd      	adds	r5, r1, #3
 80011a6:	f025 0503 	bic.w	r5, r5, #3
 80011aa:	3508      	adds	r5, #8
 80011ac:	2d0c      	cmp	r5, #12
 80011ae:	bf38      	it	cc
 80011b0:	250c      	movcc	r5, #12
 80011b2:	2d00      	cmp	r5, #0
 80011b4:	4607      	mov	r7, r0
 80011b6:	db01      	blt.n	80011bc <_malloc_r+0x1c>
 80011b8:	42a9      	cmp	r1, r5
 80011ba:	d905      	bls.n	80011c8 <_malloc_r+0x28>
 80011bc:	230c      	movs	r3, #12
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	2600      	movs	r6, #0
 80011c2:	4630      	mov	r0, r6
 80011c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c8:	4e2e      	ldr	r6, [pc, #184]	; (8001284 <_malloc_r+0xe4>)
 80011ca:	f000 f907 	bl	80013dc <__malloc_lock>
 80011ce:	6833      	ldr	r3, [r6, #0]
 80011d0:	461c      	mov	r4, r3
 80011d2:	bb34      	cbnz	r4, 8001222 <_malloc_r+0x82>
 80011d4:	4629      	mov	r1, r5
 80011d6:	4638      	mov	r0, r7
 80011d8:	f7ff ffc2 	bl	8001160 <sbrk_aligned>
 80011dc:	1c43      	adds	r3, r0, #1
 80011de:	4604      	mov	r4, r0
 80011e0:	d14d      	bne.n	800127e <_malloc_r+0xde>
 80011e2:	6834      	ldr	r4, [r6, #0]
 80011e4:	4626      	mov	r6, r4
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	d140      	bne.n	800126c <_malloc_r+0xcc>
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	4631      	mov	r1, r6
 80011ee:	4638      	mov	r0, r7
 80011f0:	eb04 0803 	add.w	r8, r4, r3
 80011f4:	f000 f848 	bl	8001288 <_sbrk_r>
 80011f8:	4580      	cmp	r8, r0
 80011fa:	d13a      	bne.n	8001272 <_malloc_r+0xd2>
 80011fc:	6821      	ldr	r1, [r4, #0]
 80011fe:	3503      	adds	r5, #3
 8001200:	1a6d      	subs	r5, r5, r1
 8001202:	f025 0503 	bic.w	r5, r5, #3
 8001206:	3508      	adds	r5, #8
 8001208:	2d0c      	cmp	r5, #12
 800120a:	bf38      	it	cc
 800120c:	250c      	movcc	r5, #12
 800120e:	4629      	mov	r1, r5
 8001210:	4638      	mov	r0, r7
 8001212:	f7ff ffa5 	bl	8001160 <sbrk_aligned>
 8001216:	3001      	adds	r0, #1
 8001218:	d02b      	beq.n	8001272 <_malloc_r+0xd2>
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	442b      	add	r3, r5
 800121e:	6023      	str	r3, [r4, #0]
 8001220:	e00e      	b.n	8001240 <_malloc_r+0xa0>
 8001222:	6822      	ldr	r2, [r4, #0]
 8001224:	1b52      	subs	r2, r2, r5
 8001226:	d41e      	bmi.n	8001266 <_malloc_r+0xc6>
 8001228:	2a0b      	cmp	r2, #11
 800122a:	d916      	bls.n	800125a <_malloc_r+0xba>
 800122c:	1961      	adds	r1, r4, r5
 800122e:	42a3      	cmp	r3, r4
 8001230:	6025      	str	r5, [r4, #0]
 8001232:	bf18      	it	ne
 8001234:	6059      	strne	r1, [r3, #4]
 8001236:	6863      	ldr	r3, [r4, #4]
 8001238:	bf08      	it	eq
 800123a:	6031      	streq	r1, [r6, #0]
 800123c:	5162      	str	r2, [r4, r5]
 800123e:	604b      	str	r3, [r1, #4]
 8001240:	4638      	mov	r0, r7
 8001242:	f104 060b 	add.w	r6, r4, #11
 8001246:	f000 f8cf 	bl	80013e8 <__malloc_unlock>
 800124a:	f026 0607 	bic.w	r6, r6, #7
 800124e:	1d23      	adds	r3, r4, #4
 8001250:	1af2      	subs	r2, r6, r3
 8001252:	d0b6      	beq.n	80011c2 <_malloc_r+0x22>
 8001254:	1b9b      	subs	r3, r3, r6
 8001256:	50a3      	str	r3, [r4, r2]
 8001258:	e7b3      	b.n	80011c2 <_malloc_r+0x22>
 800125a:	6862      	ldr	r2, [r4, #4]
 800125c:	42a3      	cmp	r3, r4
 800125e:	bf0c      	ite	eq
 8001260:	6032      	streq	r2, [r6, #0]
 8001262:	605a      	strne	r2, [r3, #4]
 8001264:	e7ec      	b.n	8001240 <_malloc_r+0xa0>
 8001266:	4623      	mov	r3, r4
 8001268:	6864      	ldr	r4, [r4, #4]
 800126a:	e7b2      	b.n	80011d2 <_malloc_r+0x32>
 800126c:	4634      	mov	r4, r6
 800126e:	6876      	ldr	r6, [r6, #4]
 8001270:	e7b9      	b.n	80011e6 <_malloc_r+0x46>
 8001272:	230c      	movs	r3, #12
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4638      	mov	r0, r7
 8001278:	f000 f8b6 	bl	80013e8 <__malloc_unlock>
 800127c:	e7a1      	b.n	80011c2 <_malloc_r+0x22>
 800127e:	6025      	str	r5, [r4, #0]
 8001280:	e7de      	b.n	8001240 <_malloc_r+0xa0>
 8001282:	bf00      	nop
 8001284:	200000e0 	.word	0x200000e0

08001288 <_sbrk_r>:
 8001288:	b538      	push	{r3, r4, r5, lr}
 800128a:	4d06      	ldr	r5, [pc, #24]	; (80012a4 <_sbrk_r+0x1c>)
 800128c:	2300      	movs	r3, #0
 800128e:	4604      	mov	r4, r0
 8001290:	4608      	mov	r0, r1
 8001292:	602b      	str	r3, [r5, #0]
 8001294:	f7ff fb30 	bl	80008f8 <_sbrk>
 8001298:	1c43      	adds	r3, r0, #1
 800129a:	d102      	bne.n	80012a2 <_sbrk_r+0x1a>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	b103      	cbz	r3, 80012a2 <_sbrk_r+0x1a>
 80012a0:	6023      	str	r3, [r4, #0]
 80012a2:	bd38      	pop	{r3, r4, r5, pc}
 80012a4:	200000e8 	.word	0x200000e8

080012a8 <__sread>:
 80012a8:	b510      	push	{r4, lr}
 80012aa:	460c      	mov	r4, r1
 80012ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b0:	f000 f8a0 	bl	80013f4 <_read_r>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	bfab      	itete	ge
 80012b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012ba:	89a3      	ldrhlt	r3, [r4, #12]
 80012bc:	181b      	addge	r3, r3, r0
 80012be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012c2:	bfac      	ite	ge
 80012c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80012c6:	81a3      	strhlt	r3, [r4, #12]
 80012c8:	bd10      	pop	{r4, pc}

080012ca <__swrite>:
 80012ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ce:	461f      	mov	r7, r3
 80012d0:	898b      	ldrh	r3, [r1, #12]
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	4605      	mov	r5, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	4616      	mov	r6, r2
 80012da:	d505      	bpl.n	80012e8 <__swrite+0x1e>
 80012dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e0:	2302      	movs	r3, #2
 80012e2:	2200      	movs	r2, #0
 80012e4:	f000 f868 	bl	80013b8 <_lseek_r>
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012f2:	81a3      	strh	r3, [r4, #12]
 80012f4:	4632      	mov	r2, r6
 80012f6:	463b      	mov	r3, r7
 80012f8:	4628      	mov	r0, r5
 80012fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012fe:	f000 b817 	b.w	8001330 <_write_r>

08001302 <__sseek>:
 8001302:	b510      	push	{r4, lr}
 8001304:	460c      	mov	r4, r1
 8001306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800130a:	f000 f855 	bl	80013b8 <_lseek_r>
 800130e:	1c43      	adds	r3, r0, #1
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	bf15      	itete	ne
 8001314:	6560      	strne	r0, [r4, #84]	; 0x54
 8001316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800131a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800131e:	81a3      	strheq	r3, [r4, #12]
 8001320:	bf18      	it	ne
 8001322:	81a3      	strhne	r3, [r4, #12]
 8001324:	bd10      	pop	{r4, pc}

08001326 <__sclose>:
 8001326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800132a:	f000 b813 	b.w	8001354 <_close_r>
	...

08001330 <_write_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	4d07      	ldr	r5, [pc, #28]	; (8001350 <_write_r+0x20>)
 8001334:	4604      	mov	r4, r0
 8001336:	4608      	mov	r0, r1
 8001338:	4611      	mov	r1, r2
 800133a:	2200      	movs	r2, #0
 800133c:	602a      	str	r2, [r5, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	f7ff fa89 	bl	8000856 <_write>
 8001344:	1c43      	adds	r3, r0, #1
 8001346:	d102      	bne.n	800134e <_write_r+0x1e>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	b103      	cbz	r3, 800134e <_write_r+0x1e>
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	200000e8 	.word	0x200000e8

08001354 <_close_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	4d06      	ldr	r5, [pc, #24]	; (8001370 <_close_r+0x1c>)
 8001358:	2300      	movs	r3, #0
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	602b      	str	r3, [r5, #0]
 8001360:	f7ff fa95 	bl	800088e <_close>
 8001364:	1c43      	adds	r3, r0, #1
 8001366:	d102      	bne.n	800136e <_close_r+0x1a>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	b103      	cbz	r3, 800136e <_close_r+0x1a>
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	200000e8 	.word	0x200000e8

08001374 <_fstat_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d07      	ldr	r5, [pc, #28]	; (8001394 <_fstat_r+0x20>)
 8001378:	2300      	movs	r3, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	4611      	mov	r1, r2
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	f7ff fa90 	bl	80008a6 <_fstat>
 8001386:	1c43      	adds	r3, r0, #1
 8001388:	d102      	bne.n	8001390 <_fstat_r+0x1c>
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	b103      	cbz	r3, 8001390 <_fstat_r+0x1c>
 800138e:	6023      	str	r3, [r4, #0]
 8001390:	bd38      	pop	{r3, r4, r5, pc}
 8001392:	bf00      	nop
 8001394:	200000e8 	.word	0x200000e8

08001398 <_isatty_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d06      	ldr	r5, [pc, #24]	; (80013b4 <_isatty_r+0x1c>)
 800139c:	2300      	movs	r3, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	602b      	str	r3, [r5, #0]
 80013a4:	f7ff fa8f 	bl	80008c6 <_isatty>
 80013a8:	1c43      	adds	r3, r0, #1
 80013aa:	d102      	bne.n	80013b2 <_isatty_r+0x1a>
 80013ac:	682b      	ldr	r3, [r5, #0]
 80013ae:	b103      	cbz	r3, 80013b2 <_isatty_r+0x1a>
 80013b0:	6023      	str	r3, [r4, #0]
 80013b2:	bd38      	pop	{r3, r4, r5, pc}
 80013b4:	200000e8 	.word	0x200000e8

080013b8 <_lseek_r>:
 80013b8:	b538      	push	{r3, r4, r5, lr}
 80013ba:	4d07      	ldr	r5, [pc, #28]	; (80013d8 <_lseek_r+0x20>)
 80013bc:	4604      	mov	r4, r0
 80013be:	4608      	mov	r0, r1
 80013c0:	4611      	mov	r1, r2
 80013c2:	2200      	movs	r2, #0
 80013c4:	602a      	str	r2, [r5, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f7ff fa88 	bl	80008dc <_lseek>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_lseek_r+0x1e>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_lseek_r+0x1e>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	200000e8 	.word	0x200000e8

080013dc <__malloc_lock>:
 80013dc:	4801      	ldr	r0, [pc, #4]	; (80013e4 <__malloc_lock+0x8>)
 80013de:	f7ff be0b 	b.w	8000ff8 <__retarget_lock_acquire_recursive>
 80013e2:	bf00      	nop
 80013e4:	200000dc 	.word	0x200000dc

080013e8 <__malloc_unlock>:
 80013e8:	4801      	ldr	r0, [pc, #4]	; (80013f0 <__malloc_unlock+0x8>)
 80013ea:	f7ff be06 	b.w	8000ffa <__retarget_lock_release_recursive>
 80013ee:	bf00      	nop
 80013f0:	200000dc 	.word	0x200000dc

080013f4 <_read_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4d07      	ldr	r5, [pc, #28]	; (8001414 <_read_r+0x20>)
 80013f8:	4604      	mov	r4, r0
 80013fa:	4608      	mov	r0, r1
 80013fc:	4611      	mov	r1, r2
 80013fe:	2200      	movs	r2, #0
 8001400:	602a      	str	r2, [r5, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	f7ff fa0a 	bl	800081c <_read>
 8001408:	1c43      	adds	r3, r0, #1
 800140a:	d102      	bne.n	8001412 <_read_r+0x1e>
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	b103      	cbz	r3, 8001412 <_read_r+0x1e>
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	bd38      	pop	{r3, r4, r5, pc}
 8001414:	200000e8 	.word	0x200000e8

08001418 <_init>:
 8001418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141a:	bf00      	nop
 800141c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141e:	bc08      	pop	{r3}
 8001420:	469e      	mov	lr, r3
 8001422:	4770      	bx	lr

08001424 <_fini>:
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001426:	bf00      	nop
 8001428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800142a:	bc08      	pop	{r3}
 800142c:	469e      	mov	lr, r3
 800142e:	4770      	bx	lr
