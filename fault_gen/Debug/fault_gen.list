
fault_gen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001490  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08001640  08001640  00011640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017ac  080017ac  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017ac  080017ac  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017ac  080017ac  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017b0  080017b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001818  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001818  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009c8  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000394  00000000  00000000  00020a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  00020df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000108  00000000  00000000  00020f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ca4  00000000  00000000  00021038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001450  00000000  00000000  00023cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000093b7  00000000  00000000  0002512c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e4e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c20  00000000  00000000  0002e534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001628 	.word	0x08001628

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001628 	.word	0x08001628

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
*/
#include <stdint.h>
#include <stdio.h>

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	//1. enable all configurable exceptions like usage fault, mem manage fault and bus fault
	// in m4 document -> system control block -> system handler control and state reg, copy addr
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <main+0x44>)
 8000298:	60fb      	str	r3, [r7, #12]
	*pSHCSR |= (1 << 16); //mem manage fault
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); //bus fault
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); //usage fault
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	601a      	str	r2, [r3, #0]

	//2. implement the fault handlers  (outside main func)

	//3. lets force the processor to execute some undefined instructions
	//call a func from RAM or SRAM
	uint32_t *pSRAM = (uint32_t*) 0x20010000;//random location of SRAM
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <main+0x48>)
 80002c0:	60bb      	str	r3, [r7, #8]
	//store invalid instruction
	*pSRAM = 0xFFFFFFFF;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	f04f 32ff 	mov.w	r2, #4294967295
 80002c8:	601a      	str	r2, [r3, #0]
	void (*some_addr) (void);
//	some_addr = (void*) 0x20010000;
//
	some_addr = (void*) 0x20010001;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <main+0x4c>)
 80002cc:	607b      	str	r3, [r7, #4]
	//some_addr = (void*) ((uint32_t)pSRAM + 1);

	// see 0x20010000 in mem browser
	// activate instruction stepping mode
	some_addr();
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4798      	blx	r3
	//4. analyze the fault
	//see disassembly
	for(;;);
 80002d2:	e7fe      	b.n	80002d2 <main+0x42>
 80002d4:	e000ed24 	.word	0xe000ed24
 80002d8:	20010000 	.word	0x20010000
 80002dc:	20010001 	.word	0x20010001

080002e0 <HardFault_Handler>:
}
//2. implement the fault handlers
//startup -> every fault name
void HardFault_Handler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	printf("Exception: HardFault\n");
 80002e4:	4801      	ldr	r0, [pc, #4]	; (80002ec <HardFault_Handler+0xc>)
 80002e6:	f000 fa21 	bl	800072c <puts>
	while(1);
 80002ea:	e7fe      	b.n	80002ea <HardFault_Handler+0xa>
 80002ec:	08001640 	.word	0x08001640

080002f0 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	printf("Exception: MemManage\n");
 80002f4:	4801      	ldr	r0, [pc, #4]	; (80002fc <MemManage_Handler+0xc>)
 80002f6:	f000 fa19 	bl	800072c <puts>
	while(1);
 80002fa:	e7fe      	b.n	80002fa <MemManage_Handler+0xa>
 80002fc:	08001658 	.word	0x08001658

08000300 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	printf("Exception: BusFault\n");
 8000304:	4801      	ldr	r0, [pc, #4]	; (800030c <BusFault_Handler+0xc>)
 8000306:	f000 fa11 	bl	800072c <puts>
	while(1);
 800030a:	e7fe      	b.n	800030a <BusFault_Handler+0xa>
 800030c:	08001670 	.word	0x08001670

08000310 <UsageFault_Handler>:
__attribute__ ((naked)) void UsageFault_Handler(void)
{	//do not mix c coding in assembly function
	//here we extracted the value of MSP which happens to be the
	//base address of the stack frame (thread mode) which got saved during
	//the exception entry from thread mode to handler mode
	__asm ("MRS r0, MSP");//top of the stack when the exception trigger
 8000310:	f3ef 8008 	mrs	r0, MSP
	__asm ("B UsageFault_Handler_c");
 8000314:	f000 b802 	b.w	800031c <UsageFault_Handler_c>
}
 8000318:	bf00      	nop
	...

0800031c <UsageFault_Handler_c>:
void UsageFault_Handler_c(uint32_t *pBaseStackFrame)//it will call r0
{	//fault here
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	//see fault analyzer (故障分析器)
	//see SVM->SVM data console to see printf
	//you can see fault status and addr reg to see How and where fault happened

	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
 8000324:	4b23      	ldr	r3, [pc, #140]	; (80003b4 <UsageFault_Handler_c+0x98>)
 8000326:	60fb      	str	r3, [r7, #12]
	printf("Exception: UsageFault\n");
 8000328:	4823      	ldr	r0, [pc, #140]	; (80003b8 <UsageFault_Handler_c+0x9c>)
 800032a:	f000 f9ff 	bl	800072c <puts>
	printf("UFSR = %lx\n", (*pUFSR) & 0xFFFF);
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	b29b      	uxth	r3, r3
 8000334:	4619      	mov	r1, r3
 8000336:	4821      	ldr	r0, [pc, #132]	; (80003bc <UsageFault_Handler_c+0xa0>)
 8000338:	f000 f972 	bl	8000620 <iprintf>
	printf("MSP = %p\n", pBaseStackFrame);//caution: not to execute exception handler, or it maybe be manipulated
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	4820      	ldr	r0, [pc, #128]	; (80003c0 <UsageFault_Handler_c+0xa4>)
 8000340:	f000 f96e 	bl	8000620 <iprintf>
	printf("R0 = %lx\n", pBaseStackFrame[0]);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4619      	mov	r1, r3
 800034a:	481e      	ldr	r0, [pc, #120]	; (80003c4 <UsageFault_Handler_c+0xa8>)
 800034c:	f000 f968 	bl	8000620 <iprintf>
	printf("R1 = %lx\n", pBaseStackFrame[1]);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3304      	adds	r3, #4
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4619      	mov	r1, r3
 8000358:	481b      	ldr	r0, [pc, #108]	; (80003c8 <UsageFault_Handler_c+0xac>)
 800035a:	f000 f961 	bl	8000620 <iprintf>
	printf("R2 = %lx\n", pBaseStackFrame[2]);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3308      	adds	r3, #8
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4619      	mov	r1, r3
 8000366:	4819      	ldr	r0, [pc, #100]	; (80003cc <UsageFault_Handler_c+0xb0>)
 8000368:	f000 f95a 	bl	8000620 <iprintf>
	printf("R3 = %lx\n", pBaseStackFrame[3]);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	330c      	adds	r3, #12
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4619      	mov	r1, r3
 8000374:	4816      	ldr	r0, [pc, #88]	; (80003d0 <UsageFault_Handler_c+0xb4>)
 8000376:	f000 f953 	bl	8000620 <iprintf>
	printf("R12 = %lx\n", pBaseStackFrame[4]);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	3310      	adds	r3, #16
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	4814      	ldr	r0, [pc, #80]	; (80003d4 <UsageFault_Handler_c+0xb8>)
 8000384:	f000 f94c 	bl	8000620 <iprintf>
	//Link Register: place of the next instruction from the point exception trigger
	printf("LR = %lx\n", pBaseStackFrame[5]);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3314      	adds	r3, #20
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4619      	mov	r1, r3
 8000390:	4811      	ldr	r0, [pc, #68]	; (80003d8 <UsageFault_Handler_c+0xbc>)
 8000392:	f000 f945 	bl	8000620 <iprintf>
	//Program Counter: processor is executing instruction at this location
	//(instruction which is undefined now)
	printf("PC = %lx\n", pBaseStackFrame[6]);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3318      	adds	r3, #24
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4619      	mov	r1, r3
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <UsageFault_Handler_c+0xc0>)
 80003a0:	f000 f93e 	bl	8000620 <iprintf>
	printf("XPSR = %lx\n", pBaseStackFrame[7]);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	331c      	adds	r3, #28
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4619      	mov	r1, r3
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <UsageFault_Handler_c+0xc4>)
 80003ae:	f000 f937 	bl	8000620 <iprintf>
	while(1);
 80003b2:	e7fe      	b.n	80003b2 <UsageFault_Handler_c+0x96>
 80003b4:	e000ed2a 	.word	0xe000ed2a
 80003b8:	08001684 	.word	0x08001684
 80003bc:	0800169c 	.word	0x0800169c
 80003c0:	080016a8 	.word	0x080016a8
 80003c4:	080016b4 	.word	0x080016b4
 80003c8:	080016c0 	.word	0x080016c0
 80003cc:	080016cc 	.word	0x080016cc
 80003d0:	080016d8 	.word	0x080016d8
 80003d4:	080016e4 	.word	0x080016e4
 80003d8:	080016f0 	.word	0x080016f0
 80003dc:	080016fc 	.word	0x080016fc
 80003e0:	08001708 	.word	0x08001708

080003e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80003ee:	4b0f      	ldr	r3, [pc, #60]	; (800042c <ITM_SendChar+0x48>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <ITM_SendChar+0x48>)
 80003f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <ITM_SendChar+0x4c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <ITM_SendChar+0x4c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000406:	bf00      	nop
 8000408:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	2b00      	cmp	r3, #0
 8000414:	d0f8      	beq.n	8000408 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000416:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	370c      	adds	r7, #12
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	e000edfc 	.word	0xe000edfc
 8000430:	e0000e00 	.word	0xe0000e00

08000434 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	e00a      	b.n	800045c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000446:	f3af 8000 	nop.w
 800044a:	4601      	mov	r1, r0
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	60ba      	str	r2, [r7, #8]
 8000452:	b2ca      	uxtb	r2, r1
 8000454:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	3301      	adds	r3, #1
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697a      	ldr	r2, [r7, #20]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	429a      	cmp	r2, r3
 8000462:	dbf0      	blt.n	8000446 <_read+0x12>
	}

return len;
 8000464:	687b      	ldr	r3, [r7, #4]
}
 8000466:	4618      	mov	r0, r3
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}

0800046e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	b086      	sub	sp, #24
 8000472:	af00      	add	r7, sp, #0
 8000474:	60f8      	str	r0, [r7, #12]
 8000476:	60b9      	str	r1, [r7, #8]
 8000478:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e009      	b.n	8000494 <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	1c5a      	adds	r2, r3, #1
 8000484:	60ba      	str	r2, [r7, #8]
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ffab 	bl	80003e4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	dbf1      	blt.n	8000480 <_write+0x12>
	}
	return len;
 800049c:	687b      	ldr	r3, [r7, #4]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <_close>:

int _close(int file)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b083      	sub	sp, #12
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
	return -1;
 80004ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004be:	b480      	push	{r7}
 80004c0:	b083      	sub	sp, #12
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	6078      	str	r0, [r7, #4]
 80004c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ce:	605a      	str	r2, [r3, #4]
	return 0;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <_isatty>:

int _isatty(int file)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	return 1;
 80004e6:	2301      	movs	r3, #1
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
	...

08000510 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000518:	4b11      	ldr	r3, [pc, #68]	; (8000560 <_sbrk+0x50>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <_sbrk+0x16>
		heap_end = &end;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <_sbrk+0x50>)
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <_sbrk+0x54>)
 8000524:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <_sbrk+0x50>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800052c:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <_sbrk+0x50>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	466a      	mov	r2, sp
 8000536:	4293      	cmp	r3, r2
 8000538:	d907      	bls.n	800054a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800053a:	f000 f83f 	bl	80005bc <__errno>
 800053e:	4603      	mov	r3, r0
 8000540:	220c      	movs	r2, #12
 8000542:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	e006      	b.n	8000558 <_sbrk+0x48>
	}

	heap_end += incr;
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <_sbrk+0x50>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	4a03      	ldr	r2, [pc, #12]	; (8000560 <_sbrk+0x50>)
 8000554:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000556:	68fb      	ldr	r3, [r7, #12]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000080 	.word	0x20000080
 8000564:	20000098 	.word	0x20000098

08000568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800056a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800056e:	490e      	ldr	r1, [pc, #56]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000570:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000574:	e002      	b.n	800057c <LoopCopyDataInit>

08000576 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 8000576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057a:	3304      	adds	r3, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 800057c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057e:	428c      	cmp	r4, r1



  bcc CopyDataInit
 8000580:	d3f9      	bcc.n	8000576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000584:	4c0b      	ldr	r4, [pc, #44]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000588:	e001      	b.n	800058e <LoopFillZerobss>

0800058a <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 800058a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800058c:	3204      	adds	r2, #4

0800058e <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 800058e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000590:	d3fb      	bcc.n	800058a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000592:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000596:	f000 f817 	bl	80005c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800059a:	f7ff fe79 	bl	8000290 <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   r0, =_estack
 80005a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005ac:	080017b4 	.word	0x080017b4
  ldr r2, =_sbss
 80005b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005b4:	20000094 	.word	0x20000094

080005b8 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC_IRQHandler>
	...

080005bc <__errno>:
 80005bc:	4b01      	ldr	r3, [pc, #4]	; (80005c4 <__errno+0x8>)
 80005be:	6818      	ldr	r0, [r3, #0]
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000

080005c8 <__libc_init_array>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	4d0d      	ldr	r5, [pc, #52]	; (8000600 <__libc_init_array+0x38>)
 80005cc:	4c0d      	ldr	r4, [pc, #52]	; (8000604 <__libc_init_array+0x3c>)
 80005ce:	1b64      	subs	r4, r4, r5
 80005d0:	10a4      	asrs	r4, r4, #2
 80005d2:	2600      	movs	r6, #0
 80005d4:	42a6      	cmp	r6, r4
 80005d6:	d109      	bne.n	80005ec <__libc_init_array+0x24>
 80005d8:	4d0b      	ldr	r5, [pc, #44]	; (8000608 <__libc_init_array+0x40>)
 80005da:	4c0c      	ldr	r4, [pc, #48]	; (800060c <__libc_init_array+0x44>)
 80005dc:	f001 f824 	bl	8001628 <_init>
 80005e0:	1b64      	subs	r4, r4, r5
 80005e2:	10a4      	asrs	r4, r4, #2
 80005e4:	2600      	movs	r6, #0
 80005e6:	42a6      	cmp	r6, r4
 80005e8:	d105      	bne.n	80005f6 <__libc_init_array+0x2e>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f0:	4798      	blx	r3
 80005f2:	3601      	adds	r6, #1
 80005f4:	e7ee      	b.n	80005d4 <__libc_init_array+0xc>
 80005f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fa:	4798      	blx	r3
 80005fc:	3601      	adds	r6, #1
 80005fe:	e7f2      	b.n	80005e6 <__libc_init_array+0x1e>
 8000600:	080017ac 	.word	0x080017ac
 8000604:	080017ac 	.word	0x080017ac
 8000608:	080017ac 	.word	0x080017ac
 800060c:	080017b0 	.word	0x080017b0

08000610 <memset>:
 8000610:	4402      	add	r2, r0
 8000612:	4603      	mov	r3, r0
 8000614:	4293      	cmp	r3, r2
 8000616:	d100      	bne.n	800061a <memset+0xa>
 8000618:	4770      	bx	lr
 800061a:	f803 1b01 	strb.w	r1, [r3], #1
 800061e:	e7f9      	b.n	8000614 <memset+0x4>

08000620 <iprintf>:
 8000620:	b40f      	push	{r0, r1, r2, r3}
 8000622:	4b0a      	ldr	r3, [pc, #40]	; (800064c <iprintf+0x2c>)
 8000624:	b513      	push	{r0, r1, r4, lr}
 8000626:	681c      	ldr	r4, [r3, #0]
 8000628:	b124      	cbz	r4, 8000634 <iprintf+0x14>
 800062a:	69a3      	ldr	r3, [r4, #24]
 800062c:	b913      	cbnz	r3, 8000634 <iprintf+0x14>
 800062e:	4620      	mov	r0, r4
 8000630:	f000 fa5e 	bl	8000af0 <__sinit>
 8000634:	ab05      	add	r3, sp, #20
 8000636:	9a04      	ldr	r2, [sp, #16]
 8000638:	68a1      	ldr	r1, [r4, #8]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	4620      	mov	r0, r4
 800063e:	f000 fc67 	bl	8000f10 <_vfiprintf_r>
 8000642:	b002      	add	sp, #8
 8000644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr
 800064c:	20000000 	.word	0x20000000

08000650 <_puts_r>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	460e      	mov	r6, r1
 8000654:	4605      	mov	r5, r0
 8000656:	b118      	cbz	r0, 8000660 <_puts_r+0x10>
 8000658:	6983      	ldr	r3, [r0, #24]
 800065a:	b90b      	cbnz	r3, 8000660 <_puts_r+0x10>
 800065c:	f000 fa48 	bl	8000af0 <__sinit>
 8000660:	69ab      	ldr	r3, [r5, #24]
 8000662:	68ac      	ldr	r4, [r5, #8]
 8000664:	b913      	cbnz	r3, 800066c <_puts_r+0x1c>
 8000666:	4628      	mov	r0, r5
 8000668:	f000 fa42 	bl	8000af0 <__sinit>
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <_puts_r+0xd0>)
 800066e:	429c      	cmp	r4, r3
 8000670:	d120      	bne.n	80006b4 <_puts_r+0x64>
 8000672:	686c      	ldr	r4, [r5, #4]
 8000674:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000676:	07db      	lsls	r3, r3, #31
 8000678:	d405      	bmi.n	8000686 <_puts_r+0x36>
 800067a:	89a3      	ldrh	r3, [r4, #12]
 800067c:	0598      	lsls	r0, r3, #22
 800067e:	d402      	bmi.n	8000686 <_puts_r+0x36>
 8000680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000682:	f000 fad3 	bl	8000c2c <__retarget_lock_acquire_recursive>
 8000686:	89a3      	ldrh	r3, [r4, #12]
 8000688:	0719      	lsls	r1, r3, #28
 800068a:	d51d      	bpl.n	80006c8 <_puts_r+0x78>
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	b1db      	cbz	r3, 80006c8 <_puts_r+0x78>
 8000690:	3e01      	subs	r6, #1
 8000692:	68a3      	ldr	r3, [r4, #8]
 8000694:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000698:	3b01      	subs	r3, #1
 800069a:	60a3      	str	r3, [r4, #8]
 800069c:	bb39      	cbnz	r1, 80006ee <_puts_r+0x9e>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	da38      	bge.n	8000714 <_puts_r+0xc4>
 80006a2:	4622      	mov	r2, r4
 80006a4:	210a      	movs	r1, #10
 80006a6:	4628      	mov	r0, r5
 80006a8:	f000 f848 	bl	800073c <__swbuf_r>
 80006ac:	3001      	adds	r0, #1
 80006ae:	d011      	beq.n	80006d4 <_puts_r+0x84>
 80006b0:	250a      	movs	r5, #10
 80006b2:	e011      	b.n	80006d8 <_puts_r+0x88>
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <_puts_r+0xd4>)
 80006b6:	429c      	cmp	r4, r3
 80006b8:	d101      	bne.n	80006be <_puts_r+0x6e>
 80006ba:	68ac      	ldr	r4, [r5, #8]
 80006bc:	e7da      	b.n	8000674 <_puts_r+0x24>
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <_puts_r+0xd8>)
 80006c0:	429c      	cmp	r4, r3
 80006c2:	bf08      	it	eq
 80006c4:	68ec      	ldreq	r4, [r5, #12]
 80006c6:	e7d5      	b.n	8000674 <_puts_r+0x24>
 80006c8:	4621      	mov	r1, r4
 80006ca:	4628      	mov	r0, r5
 80006cc:	f000 f888 	bl	80007e0 <__swsetup_r>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d0dd      	beq.n	8000690 <_puts_r+0x40>
 80006d4:	f04f 35ff 	mov.w	r5, #4294967295
 80006d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006da:	07da      	lsls	r2, r3, #31
 80006dc:	d405      	bmi.n	80006ea <_puts_r+0x9a>
 80006de:	89a3      	ldrh	r3, [r4, #12]
 80006e0:	059b      	lsls	r3, r3, #22
 80006e2:	d402      	bmi.n	80006ea <_puts_r+0x9a>
 80006e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006e6:	f000 faa2 	bl	8000c2e <__retarget_lock_release_recursive>
 80006ea:	4628      	mov	r0, r5
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	da04      	bge.n	80006fc <_puts_r+0xac>
 80006f2:	69a2      	ldr	r2, [r4, #24]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	dc06      	bgt.n	8000706 <_puts_r+0xb6>
 80006f8:	290a      	cmp	r1, #10
 80006fa:	d004      	beq.n	8000706 <_puts_r+0xb6>
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	6022      	str	r2, [r4, #0]
 8000702:	7019      	strb	r1, [r3, #0]
 8000704:	e7c5      	b.n	8000692 <_puts_r+0x42>
 8000706:	4622      	mov	r2, r4
 8000708:	4628      	mov	r0, r5
 800070a:	f000 f817 	bl	800073c <__swbuf_r>
 800070e:	3001      	adds	r0, #1
 8000710:	d1bf      	bne.n	8000692 <_puts_r+0x42>
 8000712:	e7df      	b.n	80006d4 <_puts_r+0x84>
 8000714:	6823      	ldr	r3, [r4, #0]
 8000716:	250a      	movs	r5, #10
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	6022      	str	r2, [r4, #0]
 800071c:	701d      	strb	r5, [r3, #0]
 800071e:	e7db      	b.n	80006d8 <_puts_r+0x88>
 8000720:	08001738 	.word	0x08001738
 8000724:	08001758 	.word	0x08001758
 8000728:	08001718 	.word	0x08001718

0800072c <puts>:
 800072c:	4b02      	ldr	r3, [pc, #8]	; (8000738 <puts+0xc>)
 800072e:	4601      	mov	r1, r0
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f7ff bf8d 	b.w	8000650 <_puts_r>
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000

0800073c <__swbuf_r>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	460e      	mov	r6, r1
 8000740:	4614      	mov	r4, r2
 8000742:	4605      	mov	r5, r0
 8000744:	b118      	cbz	r0, 800074e <__swbuf_r+0x12>
 8000746:	6983      	ldr	r3, [r0, #24]
 8000748:	b90b      	cbnz	r3, 800074e <__swbuf_r+0x12>
 800074a:	f000 f9d1 	bl	8000af0 <__sinit>
 800074e:	4b21      	ldr	r3, [pc, #132]	; (80007d4 <__swbuf_r+0x98>)
 8000750:	429c      	cmp	r4, r3
 8000752:	d12b      	bne.n	80007ac <__swbuf_r+0x70>
 8000754:	686c      	ldr	r4, [r5, #4]
 8000756:	69a3      	ldr	r3, [r4, #24]
 8000758:	60a3      	str	r3, [r4, #8]
 800075a:	89a3      	ldrh	r3, [r4, #12]
 800075c:	071a      	lsls	r2, r3, #28
 800075e:	d52f      	bpl.n	80007c0 <__swbuf_r+0x84>
 8000760:	6923      	ldr	r3, [r4, #16]
 8000762:	b36b      	cbz	r3, 80007c0 <__swbuf_r+0x84>
 8000764:	6923      	ldr	r3, [r4, #16]
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	1ac0      	subs	r0, r0, r3
 800076a:	6963      	ldr	r3, [r4, #20]
 800076c:	b2f6      	uxtb	r6, r6
 800076e:	4283      	cmp	r3, r0
 8000770:	4637      	mov	r7, r6
 8000772:	dc04      	bgt.n	800077e <__swbuf_r+0x42>
 8000774:	4621      	mov	r1, r4
 8000776:	4628      	mov	r0, r5
 8000778:	f000 f926 	bl	80009c8 <_fflush_r>
 800077c:	bb30      	cbnz	r0, 80007cc <__swbuf_r+0x90>
 800077e:	68a3      	ldr	r3, [r4, #8]
 8000780:	3b01      	subs	r3, #1
 8000782:	60a3      	str	r3, [r4, #8]
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	1c5a      	adds	r2, r3, #1
 8000788:	6022      	str	r2, [r4, #0]
 800078a:	701e      	strb	r6, [r3, #0]
 800078c:	6963      	ldr	r3, [r4, #20]
 800078e:	3001      	adds	r0, #1
 8000790:	4283      	cmp	r3, r0
 8000792:	d004      	beq.n	800079e <__swbuf_r+0x62>
 8000794:	89a3      	ldrh	r3, [r4, #12]
 8000796:	07db      	lsls	r3, r3, #31
 8000798:	d506      	bpl.n	80007a8 <__swbuf_r+0x6c>
 800079a:	2e0a      	cmp	r6, #10
 800079c:	d104      	bne.n	80007a8 <__swbuf_r+0x6c>
 800079e:	4621      	mov	r1, r4
 80007a0:	4628      	mov	r0, r5
 80007a2:	f000 f911 	bl	80009c8 <_fflush_r>
 80007a6:	b988      	cbnz	r0, 80007cc <__swbuf_r+0x90>
 80007a8:	4638      	mov	r0, r7
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <__swbuf_r+0x9c>)
 80007ae:	429c      	cmp	r4, r3
 80007b0:	d101      	bne.n	80007b6 <__swbuf_r+0x7a>
 80007b2:	68ac      	ldr	r4, [r5, #8]
 80007b4:	e7cf      	b.n	8000756 <__swbuf_r+0x1a>
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <__swbuf_r+0xa0>)
 80007b8:	429c      	cmp	r4, r3
 80007ba:	bf08      	it	eq
 80007bc:	68ec      	ldreq	r4, [r5, #12]
 80007be:	e7ca      	b.n	8000756 <__swbuf_r+0x1a>
 80007c0:	4621      	mov	r1, r4
 80007c2:	4628      	mov	r0, r5
 80007c4:	f000 f80c 	bl	80007e0 <__swsetup_r>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d0cb      	beq.n	8000764 <__swbuf_r+0x28>
 80007cc:	f04f 37ff 	mov.w	r7, #4294967295
 80007d0:	e7ea      	b.n	80007a8 <__swbuf_r+0x6c>
 80007d2:	bf00      	nop
 80007d4:	08001738 	.word	0x08001738
 80007d8:	08001758 	.word	0x08001758
 80007dc:	08001718 	.word	0x08001718

080007e0 <__swsetup_r>:
 80007e0:	4b32      	ldr	r3, [pc, #200]	; (80008ac <__swsetup_r+0xcc>)
 80007e2:	b570      	push	{r4, r5, r6, lr}
 80007e4:	681d      	ldr	r5, [r3, #0]
 80007e6:	4606      	mov	r6, r0
 80007e8:	460c      	mov	r4, r1
 80007ea:	b125      	cbz	r5, 80007f6 <__swsetup_r+0x16>
 80007ec:	69ab      	ldr	r3, [r5, #24]
 80007ee:	b913      	cbnz	r3, 80007f6 <__swsetup_r+0x16>
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 f97d 	bl	8000af0 <__sinit>
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <__swsetup_r+0xd0>)
 80007f8:	429c      	cmp	r4, r3
 80007fa:	d10f      	bne.n	800081c <__swsetup_r+0x3c>
 80007fc:	686c      	ldr	r4, [r5, #4]
 80007fe:	89a3      	ldrh	r3, [r4, #12]
 8000800:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000804:	0719      	lsls	r1, r3, #28
 8000806:	d42c      	bmi.n	8000862 <__swsetup_r+0x82>
 8000808:	06dd      	lsls	r5, r3, #27
 800080a:	d411      	bmi.n	8000830 <__swsetup_r+0x50>
 800080c:	2309      	movs	r3, #9
 800080e:	6033      	str	r3, [r6, #0]
 8000810:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000814:	81a3      	strh	r3, [r4, #12]
 8000816:	f04f 30ff 	mov.w	r0, #4294967295
 800081a:	e03e      	b.n	800089a <__swsetup_r+0xba>
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <__swsetup_r+0xd4>)
 800081e:	429c      	cmp	r4, r3
 8000820:	d101      	bne.n	8000826 <__swsetup_r+0x46>
 8000822:	68ac      	ldr	r4, [r5, #8]
 8000824:	e7eb      	b.n	80007fe <__swsetup_r+0x1e>
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <__swsetup_r+0xd8>)
 8000828:	429c      	cmp	r4, r3
 800082a:	bf08      	it	eq
 800082c:	68ec      	ldreq	r4, [r5, #12]
 800082e:	e7e6      	b.n	80007fe <__swsetup_r+0x1e>
 8000830:	0758      	lsls	r0, r3, #29
 8000832:	d512      	bpl.n	800085a <__swsetup_r+0x7a>
 8000834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000836:	b141      	cbz	r1, 800084a <__swsetup_r+0x6a>
 8000838:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800083c:	4299      	cmp	r1, r3
 800083e:	d002      	beq.n	8000846 <__swsetup_r+0x66>
 8000840:	4630      	mov	r0, r6
 8000842:	f000 fa5b 	bl	8000cfc <_free_r>
 8000846:	2300      	movs	r3, #0
 8000848:	6363      	str	r3, [r4, #52]	; 0x34
 800084a:	89a3      	ldrh	r3, [r4, #12]
 800084c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000850:	81a3      	strh	r3, [r4, #12]
 8000852:	2300      	movs	r3, #0
 8000854:	6063      	str	r3, [r4, #4]
 8000856:	6923      	ldr	r3, [r4, #16]
 8000858:	6023      	str	r3, [r4, #0]
 800085a:	89a3      	ldrh	r3, [r4, #12]
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	81a3      	strh	r3, [r4, #12]
 8000862:	6923      	ldr	r3, [r4, #16]
 8000864:	b94b      	cbnz	r3, 800087a <__swsetup_r+0x9a>
 8000866:	89a3      	ldrh	r3, [r4, #12]
 8000868:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800086c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000870:	d003      	beq.n	800087a <__swsetup_r+0x9a>
 8000872:	4621      	mov	r1, r4
 8000874:	4630      	mov	r0, r6
 8000876:	f000 fa01 	bl	8000c7c <__smakebuf_r>
 800087a:	89a0      	ldrh	r0, [r4, #12]
 800087c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000880:	f010 0301 	ands.w	r3, r0, #1
 8000884:	d00a      	beq.n	800089c <__swsetup_r+0xbc>
 8000886:	2300      	movs	r3, #0
 8000888:	60a3      	str	r3, [r4, #8]
 800088a:	6963      	ldr	r3, [r4, #20]
 800088c:	425b      	negs	r3, r3
 800088e:	61a3      	str	r3, [r4, #24]
 8000890:	6923      	ldr	r3, [r4, #16]
 8000892:	b943      	cbnz	r3, 80008a6 <__swsetup_r+0xc6>
 8000894:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000898:	d1ba      	bne.n	8000810 <__swsetup_r+0x30>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	0781      	lsls	r1, r0, #30
 800089e:	bf58      	it	pl
 80008a0:	6963      	ldrpl	r3, [r4, #20]
 80008a2:	60a3      	str	r3, [r4, #8]
 80008a4:	e7f4      	b.n	8000890 <__swsetup_r+0xb0>
 80008a6:	2000      	movs	r0, #0
 80008a8:	e7f7      	b.n	800089a <__swsetup_r+0xba>
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000
 80008b0:	08001738 	.word	0x08001738
 80008b4:	08001758 	.word	0x08001758
 80008b8:	08001718 	.word	0x08001718

080008bc <__sflush_r>:
 80008bc:	898a      	ldrh	r2, [r1, #12]
 80008be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008c2:	4605      	mov	r5, r0
 80008c4:	0710      	lsls	r0, r2, #28
 80008c6:	460c      	mov	r4, r1
 80008c8:	d458      	bmi.n	800097c <__sflush_r+0xc0>
 80008ca:	684b      	ldr	r3, [r1, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	dc05      	bgt.n	80008dc <__sflush_r+0x20>
 80008d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	dc02      	bgt.n	80008dc <__sflush_r+0x20>
 80008d6:	2000      	movs	r0, #0
 80008d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d0f9      	beq.n	80008d6 <__sflush_r+0x1a>
 80008e2:	2300      	movs	r3, #0
 80008e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80008e8:	682f      	ldr	r7, [r5, #0]
 80008ea:	602b      	str	r3, [r5, #0]
 80008ec:	d032      	beq.n	8000954 <__sflush_r+0x98>
 80008ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80008f0:	89a3      	ldrh	r3, [r4, #12]
 80008f2:	075a      	lsls	r2, r3, #29
 80008f4:	d505      	bpl.n	8000902 <__sflush_r+0x46>
 80008f6:	6863      	ldr	r3, [r4, #4]
 80008f8:	1ac0      	subs	r0, r0, r3
 80008fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008fc:	b10b      	cbz	r3, 8000902 <__sflush_r+0x46>
 80008fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000900:	1ac0      	subs	r0, r0, r3
 8000902:	2300      	movs	r3, #0
 8000904:	4602      	mov	r2, r0
 8000906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000908:	6a21      	ldr	r1, [r4, #32]
 800090a:	4628      	mov	r0, r5
 800090c:	47b0      	blx	r6
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	d106      	bne.n	8000922 <__sflush_r+0x66>
 8000914:	6829      	ldr	r1, [r5, #0]
 8000916:	291d      	cmp	r1, #29
 8000918:	d82c      	bhi.n	8000974 <__sflush_r+0xb8>
 800091a:	4a2a      	ldr	r2, [pc, #168]	; (80009c4 <__sflush_r+0x108>)
 800091c:	40ca      	lsrs	r2, r1
 800091e:	07d6      	lsls	r6, r2, #31
 8000920:	d528      	bpl.n	8000974 <__sflush_r+0xb8>
 8000922:	2200      	movs	r2, #0
 8000924:	6062      	str	r2, [r4, #4]
 8000926:	04d9      	lsls	r1, r3, #19
 8000928:	6922      	ldr	r2, [r4, #16]
 800092a:	6022      	str	r2, [r4, #0]
 800092c:	d504      	bpl.n	8000938 <__sflush_r+0x7c>
 800092e:	1c42      	adds	r2, r0, #1
 8000930:	d101      	bne.n	8000936 <__sflush_r+0x7a>
 8000932:	682b      	ldr	r3, [r5, #0]
 8000934:	b903      	cbnz	r3, 8000938 <__sflush_r+0x7c>
 8000936:	6560      	str	r0, [r4, #84]	; 0x54
 8000938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800093a:	602f      	str	r7, [r5, #0]
 800093c:	2900      	cmp	r1, #0
 800093e:	d0ca      	beq.n	80008d6 <__sflush_r+0x1a>
 8000940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000944:	4299      	cmp	r1, r3
 8000946:	d002      	beq.n	800094e <__sflush_r+0x92>
 8000948:	4628      	mov	r0, r5
 800094a:	f000 f9d7 	bl	8000cfc <_free_r>
 800094e:	2000      	movs	r0, #0
 8000950:	6360      	str	r0, [r4, #52]	; 0x34
 8000952:	e7c1      	b.n	80008d8 <__sflush_r+0x1c>
 8000954:	6a21      	ldr	r1, [r4, #32]
 8000956:	2301      	movs	r3, #1
 8000958:	4628      	mov	r0, r5
 800095a:	47b0      	blx	r6
 800095c:	1c41      	adds	r1, r0, #1
 800095e:	d1c7      	bne.n	80008f0 <__sflush_r+0x34>
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0c4      	beq.n	80008f0 <__sflush_r+0x34>
 8000966:	2b1d      	cmp	r3, #29
 8000968:	d001      	beq.n	800096e <__sflush_r+0xb2>
 800096a:	2b16      	cmp	r3, #22
 800096c:	d101      	bne.n	8000972 <__sflush_r+0xb6>
 800096e:	602f      	str	r7, [r5, #0]
 8000970:	e7b1      	b.n	80008d6 <__sflush_r+0x1a>
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000978:	81a3      	strh	r3, [r4, #12]
 800097a:	e7ad      	b.n	80008d8 <__sflush_r+0x1c>
 800097c:	690f      	ldr	r7, [r1, #16]
 800097e:	2f00      	cmp	r7, #0
 8000980:	d0a9      	beq.n	80008d6 <__sflush_r+0x1a>
 8000982:	0793      	lsls	r3, r2, #30
 8000984:	680e      	ldr	r6, [r1, #0]
 8000986:	bf08      	it	eq
 8000988:	694b      	ldreq	r3, [r1, #20]
 800098a:	600f      	str	r7, [r1, #0]
 800098c:	bf18      	it	ne
 800098e:	2300      	movne	r3, #0
 8000990:	eba6 0807 	sub.w	r8, r6, r7
 8000994:	608b      	str	r3, [r1, #8]
 8000996:	f1b8 0f00 	cmp.w	r8, #0
 800099a:	dd9c      	ble.n	80008d6 <__sflush_r+0x1a>
 800099c:	6a21      	ldr	r1, [r4, #32]
 800099e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80009a0:	4643      	mov	r3, r8
 80009a2:	463a      	mov	r2, r7
 80009a4:	4628      	mov	r0, r5
 80009a6:	47b0      	blx	r6
 80009a8:	2800      	cmp	r0, #0
 80009aa:	dc06      	bgt.n	80009ba <__sflush_r+0xfe>
 80009ac:	89a3      	ldrh	r3, [r4, #12]
 80009ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b2:	81a3      	strh	r3, [r4, #12]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	e78e      	b.n	80008d8 <__sflush_r+0x1c>
 80009ba:	4407      	add	r7, r0
 80009bc:	eba8 0800 	sub.w	r8, r8, r0
 80009c0:	e7e9      	b.n	8000996 <__sflush_r+0xda>
 80009c2:	bf00      	nop
 80009c4:	20400001 	.word	0x20400001

080009c8 <_fflush_r>:
 80009c8:	b538      	push	{r3, r4, r5, lr}
 80009ca:	690b      	ldr	r3, [r1, #16]
 80009cc:	4605      	mov	r5, r0
 80009ce:	460c      	mov	r4, r1
 80009d0:	b913      	cbnz	r3, 80009d8 <_fflush_r+0x10>
 80009d2:	2500      	movs	r5, #0
 80009d4:	4628      	mov	r0, r5
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
 80009d8:	b118      	cbz	r0, 80009e2 <_fflush_r+0x1a>
 80009da:	6983      	ldr	r3, [r0, #24]
 80009dc:	b90b      	cbnz	r3, 80009e2 <_fflush_r+0x1a>
 80009de:	f000 f887 	bl	8000af0 <__sinit>
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <_fflush_r+0x6c>)
 80009e4:	429c      	cmp	r4, r3
 80009e6:	d11b      	bne.n	8000a20 <_fflush_r+0x58>
 80009e8:	686c      	ldr	r4, [r5, #4]
 80009ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0ef      	beq.n	80009d2 <_fflush_r+0xa>
 80009f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80009f4:	07d0      	lsls	r0, r2, #31
 80009f6:	d404      	bmi.n	8000a02 <_fflush_r+0x3a>
 80009f8:	0599      	lsls	r1, r3, #22
 80009fa:	d402      	bmi.n	8000a02 <_fflush_r+0x3a>
 80009fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009fe:	f000 f915 	bl	8000c2c <__retarget_lock_acquire_recursive>
 8000a02:	4628      	mov	r0, r5
 8000a04:	4621      	mov	r1, r4
 8000a06:	f7ff ff59 	bl	80008bc <__sflush_r>
 8000a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a0c:	07da      	lsls	r2, r3, #31
 8000a0e:	4605      	mov	r5, r0
 8000a10:	d4e0      	bmi.n	80009d4 <_fflush_r+0xc>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	059b      	lsls	r3, r3, #22
 8000a16:	d4dd      	bmi.n	80009d4 <_fflush_r+0xc>
 8000a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a1a:	f000 f908 	bl	8000c2e <__retarget_lock_release_recursive>
 8000a1e:	e7d9      	b.n	80009d4 <_fflush_r+0xc>
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <_fflush_r+0x70>)
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d101      	bne.n	8000a2a <_fflush_r+0x62>
 8000a26:	68ac      	ldr	r4, [r5, #8]
 8000a28:	e7df      	b.n	80009ea <_fflush_r+0x22>
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <_fflush_r+0x74>)
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	bf08      	it	eq
 8000a30:	68ec      	ldreq	r4, [r5, #12]
 8000a32:	e7da      	b.n	80009ea <_fflush_r+0x22>
 8000a34:	08001738 	.word	0x08001738
 8000a38:	08001758 	.word	0x08001758
 8000a3c:	08001718 	.word	0x08001718

08000a40 <std>:
 8000a40:	2300      	movs	r3, #0
 8000a42:	b510      	push	{r4, lr}
 8000a44:	4604      	mov	r4, r0
 8000a46:	e9c0 3300 	strd	r3, r3, [r0]
 8000a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a4e:	6083      	str	r3, [r0, #8]
 8000a50:	8181      	strh	r1, [r0, #12]
 8000a52:	6643      	str	r3, [r0, #100]	; 0x64
 8000a54:	81c2      	strh	r2, [r0, #14]
 8000a56:	6183      	str	r3, [r0, #24]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	305c      	adds	r0, #92	; 0x5c
 8000a5e:	f7ff fdd7 	bl	8000610 <memset>
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <std+0x38>)
 8000a64:	6263      	str	r3, [r4, #36]	; 0x24
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <std+0x3c>)
 8000a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <std+0x40>)
 8000a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <std+0x44>)
 8000a70:	6224      	str	r4, [r4, #32]
 8000a72:	6323      	str	r3, [r4, #48]	; 0x30
 8000a74:	bd10      	pop	{r4, pc}
 8000a76:	bf00      	nop
 8000a78:	080014b9 	.word	0x080014b9
 8000a7c:	080014db 	.word	0x080014db
 8000a80:	08001513 	.word	0x08001513
 8000a84:	08001537 	.word	0x08001537

08000a88 <_cleanup_r>:
 8000a88:	4901      	ldr	r1, [pc, #4]	; (8000a90 <_cleanup_r+0x8>)
 8000a8a:	f000 b8af 	b.w	8000bec <_fwalk_reent>
 8000a8e:	bf00      	nop
 8000a90:	080009c9 	.word	0x080009c9

08000a94 <__sfmoreglue>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	2268      	movs	r2, #104	; 0x68
 8000a98:	1e4d      	subs	r5, r1, #1
 8000a9a:	4355      	muls	r5, r2
 8000a9c:	460e      	mov	r6, r1
 8000a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000aa2:	f000 f997 	bl	8000dd4 <_malloc_r>
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	b140      	cbz	r0, 8000abc <__sfmoreglue+0x28>
 8000aaa:	2100      	movs	r1, #0
 8000aac:	e9c0 1600 	strd	r1, r6, [r0]
 8000ab0:	300c      	adds	r0, #12
 8000ab2:	60a0      	str	r0, [r4, #8]
 8000ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ab8:	f7ff fdaa 	bl	8000610 <memset>
 8000abc:	4620      	mov	r0, r4
 8000abe:	bd70      	pop	{r4, r5, r6, pc}

08000ac0 <__sfp_lock_acquire>:
 8000ac0:	4801      	ldr	r0, [pc, #4]	; (8000ac8 <__sfp_lock_acquire+0x8>)
 8000ac2:	f000 b8b3 	b.w	8000c2c <__retarget_lock_acquire_recursive>
 8000ac6:	bf00      	nop
 8000ac8:	20000085 	.word	0x20000085

08000acc <__sfp_lock_release>:
 8000acc:	4801      	ldr	r0, [pc, #4]	; (8000ad4 <__sfp_lock_release+0x8>)
 8000ace:	f000 b8ae 	b.w	8000c2e <__retarget_lock_release_recursive>
 8000ad2:	bf00      	nop
 8000ad4:	20000085 	.word	0x20000085

08000ad8 <__sinit_lock_acquire>:
 8000ad8:	4801      	ldr	r0, [pc, #4]	; (8000ae0 <__sinit_lock_acquire+0x8>)
 8000ada:	f000 b8a7 	b.w	8000c2c <__retarget_lock_acquire_recursive>
 8000ade:	bf00      	nop
 8000ae0:	20000086 	.word	0x20000086

08000ae4 <__sinit_lock_release>:
 8000ae4:	4801      	ldr	r0, [pc, #4]	; (8000aec <__sinit_lock_release+0x8>)
 8000ae6:	f000 b8a2 	b.w	8000c2e <__retarget_lock_release_recursive>
 8000aea:	bf00      	nop
 8000aec:	20000086 	.word	0x20000086

08000af0 <__sinit>:
 8000af0:	b510      	push	{r4, lr}
 8000af2:	4604      	mov	r4, r0
 8000af4:	f7ff fff0 	bl	8000ad8 <__sinit_lock_acquire>
 8000af8:	69a3      	ldr	r3, [r4, #24]
 8000afa:	b11b      	cbz	r3, 8000b04 <__sinit+0x14>
 8000afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b00:	f7ff bff0 	b.w	8000ae4 <__sinit_lock_release>
 8000b04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b08:	6523      	str	r3, [r4, #80]	; 0x50
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <__sinit+0x68>)
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <__sinit+0x6c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	bf04      	itt	eq
 8000b16:	2301      	moveq	r3, #1
 8000b18:	61a3      	streq	r3, [r4, #24]
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f000 f820 	bl	8000b60 <__sfp>
 8000b20:	6060      	str	r0, [r4, #4]
 8000b22:	4620      	mov	r0, r4
 8000b24:	f000 f81c 	bl	8000b60 <__sfp>
 8000b28:	60a0      	str	r0, [r4, #8]
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f000 f818 	bl	8000b60 <__sfp>
 8000b30:	2200      	movs	r2, #0
 8000b32:	60e0      	str	r0, [r4, #12]
 8000b34:	2104      	movs	r1, #4
 8000b36:	6860      	ldr	r0, [r4, #4]
 8000b38:	f7ff ff82 	bl	8000a40 <std>
 8000b3c:	68a0      	ldr	r0, [r4, #8]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2109      	movs	r1, #9
 8000b42:	f7ff ff7d 	bl	8000a40 <std>
 8000b46:	68e0      	ldr	r0, [r4, #12]
 8000b48:	2202      	movs	r2, #2
 8000b4a:	2112      	movs	r1, #18
 8000b4c:	f7ff ff78 	bl	8000a40 <std>
 8000b50:	2301      	movs	r3, #1
 8000b52:	61a3      	str	r3, [r4, #24]
 8000b54:	e7d2      	b.n	8000afc <__sinit+0xc>
 8000b56:	bf00      	nop
 8000b58:	08001714 	.word	0x08001714
 8000b5c:	08000a89 	.word	0x08000a89

08000b60 <__sfp>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	4607      	mov	r7, r0
 8000b64:	f7ff ffac 	bl	8000ac0 <__sfp_lock_acquire>
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <__sfp+0x84>)
 8000b6a:	681e      	ldr	r6, [r3, #0]
 8000b6c:	69b3      	ldr	r3, [r6, #24]
 8000b6e:	b913      	cbnz	r3, 8000b76 <__sfp+0x16>
 8000b70:	4630      	mov	r0, r6
 8000b72:	f7ff ffbd 	bl	8000af0 <__sinit>
 8000b76:	3648      	adds	r6, #72	; 0x48
 8000b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	d503      	bpl.n	8000b88 <__sfp+0x28>
 8000b80:	6833      	ldr	r3, [r6, #0]
 8000b82:	b30b      	cbz	r3, 8000bc8 <__sfp+0x68>
 8000b84:	6836      	ldr	r6, [r6, #0]
 8000b86:	e7f7      	b.n	8000b78 <__sfp+0x18>
 8000b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b8c:	b9d5      	cbnz	r5, 8000bc4 <__sfp+0x64>
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <__sfp+0x88>)
 8000b90:	60e3      	str	r3, [r4, #12]
 8000b92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b96:	6665      	str	r5, [r4, #100]	; 0x64
 8000b98:	f000 f847 	bl	8000c2a <__retarget_lock_init_recursive>
 8000b9c:	f7ff ff96 	bl	8000acc <__sfp_lock_release>
 8000ba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ba8:	6025      	str	r5, [r4, #0]
 8000baa:	61a5      	str	r5, [r4, #24]
 8000bac:	2208      	movs	r2, #8
 8000bae:	4629      	mov	r1, r5
 8000bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bb4:	f7ff fd2c 	bl	8000610 <memset>
 8000bb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc4:	3468      	adds	r4, #104	; 0x68
 8000bc6:	e7d9      	b.n	8000b7c <__sfp+0x1c>
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4638      	mov	r0, r7
 8000bcc:	f7ff ff62 	bl	8000a94 <__sfmoreglue>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	6030      	str	r0, [r6, #0]
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d1d5      	bne.n	8000b84 <__sfp+0x24>
 8000bd8:	f7ff ff78 	bl	8000acc <__sfp_lock_release>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	e7ee      	b.n	8000bc0 <__sfp+0x60>
 8000be2:	bf00      	nop
 8000be4:	08001714 	.word	0x08001714
 8000be8:	ffff0001 	.word	0xffff0001

08000bec <_fwalk_reent>:
 8000bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bf0:	4606      	mov	r6, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bfe:	f1b9 0901 	subs.w	r9, r9, #1
 8000c02:	d505      	bpl.n	8000c10 <_fwalk_reent+0x24>
 8000c04:	6824      	ldr	r4, [r4, #0]
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d1f7      	bne.n	8000bfa <_fwalk_reent+0xe>
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c10:	89ab      	ldrh	r3, [r5, #12]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d907      	bls.n	8000c26 <_fwalk_reent+0x3a>
 8000c16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	d003      	beq.n	8000c26 <_fwalk_reent+0x3a>
 8000c1e:	4629      	mov	r1, r5
 8000c20:	4630      	mov	r0, r6
 8000c22:	47c0      	blx	r8
 8000c24:	4307      	orrs	r7, r0
 8000c26:	3568      	adds	r5, #104	; 0x68
 8000c28:	e7e9      	b.n	8000bfe <_fwalk_reent+0x12>

08000c2a <__retarget_lock_init_recursive>:
 8000c2a:	4770      	bx	lr

08000c2c <__retarget_lock_acquire_recursive>:
 8000c2c:	4770      	bx	lr

08000c2e <__retarget_lock_release_recursive>:
 8000c2e:	4770      	bx	lr

08000c30 <__swhatbuf_r>:
 8000c30:	b570      	push	{r4, r5, r6, lr}
 8000c32:	460e      	mov	r6, r1
 8000c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c38:	2900      	cmp	r1, #0
 8000c3a:	b096      	sub	sp, #88	; 0x58
 8000c3c:	4614      	mov	r4, r2
 8000c3e:	461d      	mov	r5, r3
 8000c40:	da08      	bge.n	8000c54 <__swhatbuf_r+0x24>
 8000c42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c46:	2200      	movs	r2, #0
 8000c48:	602a      	str	r2, [r5, #0]
 8000c4a:	061a      	lsls	r2, r3, #24
 8000c4c:	d410      	bmi.n	8000c70 <__swhatbuf_r+0x40>
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	e00e      	b.n	8000c72 <__swhatbuf_r+0x42>
 8000c54:	466a      	mov	r2, sp
 8000c56:	f000 fc95 	bl	8001584 <_fstat_r>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	dbf1      	blt.n	8000c42 <__swhatbuf_r+0x12>
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c68:	425a      	negs	r2, r3
 8000c6a:	415a      	adcs	r2, r3
 8000c6c:	602a      	str	r2, [r5, #0]
 8000c6e:	e7ee      	b.n	8000c4e <__swhatbuf_r+0x1e>
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	2000      	movs	r0, #0
 8000c74:	6023      	str	r3, [r4, #0]
 8000c76:	b016      	add	sp, #88	; 0x58
 8000c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c7c <__smakebuf_r>:
 8000c7c:	898b      	ldrh	r3, [r1, #12]
 8000c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c80:	079d      	lsls	r5, r3, #30
 8000c82:	4606      	mov	r6, r0
 8000c84:	460c      	mov	r4, r1
 8000c86:	d507      	bpl.n	8000c98 <__smakebuf_r+0x1c>
 8000c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c8c:	6023      	str	r3, [r4, #0]
 8000c8e:	6123      	str	r3, [r4, #16]
 8000c90:	2301      	movs	r3, #1
 8000c92:	6163      	str	r3, [r4, #20]
 8000c94:	b002      	add	sp, #8
 8000c96:	bd70      	pop	{r4, r5, r6, pc}
 8000c98:	ab01      	add	r3, sp, #4
 8000c9a:	466a      	mov	r2, sp
 8000c9c:	f7ff ffc8 	bl	8000c30 <__swhatbuf_r>
 8000ca0:	9900      	ldr	r1, [sp, #0]
 8000ca2:	4605      	mov	r5, r0
 8000ca4:	4630      	mov	r0, r6
 8000ca6:	f000 f895 	bl	8000dd4 <_malloc_r>
 8000caa:	b948      	cbnz	r0, 8000cc0 <__smakebuf_r+0x44>
 8000cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb0:	059a      	lsls	r2, r3, #22
 8000cb2:	d4ef      	bmi.n	8000c94 <__smakebuf_r+0x18>
 8000cb4:	f023 0303 	bic.w	r3, r3, #3
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	81a3      	strh	r3, [r4, #12]
 8000cbe:	e7e3      	b.n	8000c88 <__smakebuf_r+0xc>
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <__smakebuf_r+0x7c>)
 8000cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	6020      	str	r0, [r4, #0]
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ccc:	81a3      	strh	r3, [r4, #12]
 8000cce:	9b00      	ldr	r3, [sp, #0]
 8000cd0:	6163      	str	r3, [r4, #20]
 8000cd2:	9b01      	ldr	r3, [sp, #4]
 8000cd4:	6120      	str	r0, [r4, #16]
 8000cd6:	b15b      	cbz	r3, 8000cf0 <__smakebuf_r+0x74>
 8000cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cdc:	4630      	mov	r0, r6
 8000cde:	f000 fc63 	bl	80015a8 <_isatty_r>
 8000ce2:	b128      	cbz	r0, 8000cf0 <__smakebuf_r+0x74>
 8000ce4:	89a3      	ldrh	r3, [r4, #12]
 8000ce6:	f023 0303 	bic.w	r3, r3, #3
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	81a3      	strh	r3, [r4, #12]
 8000cf0:	89a0      	ldrh	r0, [r4, #12]
 8000cf2:	4305      	orrs	r5, r0
 8000cf4:	81a5      	strh	r5, [r4, #12]
 8000cf6:	e7cd      	b.n	8000c94 <__smakebuf_r+0x18>
 8000cf8:	08000a89 	.word	0x08000a89

08000cfc <_free_r>:
 8000cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d044      	beq.n	8000d8c <_free_r+0x90>
 8000d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d06:	9001      	str	r0, [sp, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8000d0e:	bfb8      	it	lt
 8000d10:	18e4      	addlt	r4, r4, r3
 8000d12:	f000 fc6b 	bl	80015ec <__malloc_lock>
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <_free_r+0x94>)
 8000d18:	9801      	ldr	r0, [sp, #4]
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	b933      	cbnz	r3, 8000d2c <_free_r+0x30>
 8000d1e:	6063      	str	r3, [r4, #4]
 8000d20:	6014      	str	r4, [r2, #0]
 8000d22:	b003      	add	sp, #12
 8000d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d28:	f000 bc66 	b.w	80015f8 <__malloc_unlock>
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d908      	bls.n	8000d42 <_free_r+0x46>
 8000d30:	6825      	ldr	r5, [r4, #0]
 8000d32:	1961      	adds	r1, r4, r5
 8000d34:	428b      	cmp	r3, r1
 8000d36:	bf01      	itttt	eq
 8000d38:	6819      	ldreq	r1, [r3, #0]
 8000d3a:	685b      	ldreq	r3, [r3, #4]
 8000d3c:	1949      	addeq	r1, r1, r5
 8000d3e:	6021      	streq	r1, [r4, #0]
 8000d40:	e7ed      	b.n	8000d1e <_free_r+0x22>
 8000d42:	461a      	mov	r2, r3
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	b10b      	cbz	r3, 8000d4c <_free_r+0x50>
 8000d48:	42a3      	cmp	r3, r4
 8000d4a:	d9fa      	bls.n	8000d42 <_free_r+0x46>
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	1855      	adds	r5, r2, r1
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	d10b      	bne.n	8000d6c <_free_r+0x70>
 8000d54:	6824      	ldr	r4, [r4, #0]
 8000d56:	4421      	add	r1, r4
 8000d58:	1854      	adds	r4, r2, r1
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	6011      	str	r1, [r2, #0]
 8000d5e:	d1e0      	bne.n	8000d22 <_free_r+0x26>
 8000d60:	681c      	ldr	r4, [r3, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	6053      	str	r3, [r2, #4]
 8000d66:	4421      	add	r1, r4
 8000d68:	6011      	str	r1, [r2, #0]
 8000d6a:	e7da      	b.n	8000d22 <_free_r+0x26>
 8000d6c:	d902      	bls.n	8000d74 <_free_r+0x78>
 8000d6e:	230c      	movs	r3, #12
 8000d70:	6003      	str	r3, [r0, #0]
 8000d72:	e7d6      	b.n	8000d22 <_free_r+0x26>
 8000d74:	6825      	ldr	r5, [r4, #0]
 8000d76:	1961      	adds	r1, r4, r5
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	bf04      	itt	eq
 8000d7c:	6819      	ldreq	r1, [r3, #0]
 8000d7e:	685b      	ldreq	r3, [r3, #4]
 8000d80:	6063      	str	r3, [r4, #4]
 8000d82:	bf04      	itt	eq
 8000d84:	1949      	addeq	r1, r1, r5
 8000d86:	6021      	streq	r1, [r4, #0]
 8000d88:	6054      	str	r4, [r2, #4]
 8000d8a:	e7ca      	b.n	8000d22 <_free_r+0x26>
 8000d8c:	b003      	add	sp, #12
 8000d8e:	bd30      	pop	{r4, r5, pc}
 8000d90:	20000088 	.word	0x20000088

08000d94 <sbrk_aligned>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	4e0e      	ldr	r6, [pc, #56]	; (8000dd0 <sbrk_aligned+0x3c>)
 8000d98:	460c      	mov	r4, r1
 8000d9a:	6831      	ldr	r1, [r6, #0]
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	b911      	cbnz	r1, 8000da6 <sbrk_aligned+0x12>
 8000da0:	f000 fb7a 	bl	8001498 <_sbrk_r>
 8000da4:	6030      	str	r0, [r6, #0]
 8000da6:	4621      	mov	r1, r4
 8000da8:	4628      	mov	r0, r5
 8000daa:	f000 fb75 	bl	8001498 <_sbrk_r>
 8000dae:	1c43      	adds	r3, r0, #1
 8000db0:	d00a      	beq.n	8000dc8 <sbrk_aligned+0x34>
 8000db2:	1cc4      	adds	r4, r0, #3
 8000db4:	f024 0403 	bic.w	r4, r4, #3
 8000db8:	42a0      	cmp	r0, r4
 8000dba:	d007      	beq.n	8000dcc <sbrk_aligned+0x38>
 8000dbc:	1a21      	subs	r1, r4, r0
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f000 fb6a 	bl	8001498 <_sbrk_r>
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	d101      	bne.n	8000dcc <sbrk_aligned+0x38>
 8000dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8000dcc:	4620      	mov	r0, r4
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
 8000dd0:	2000008c 	.word	0x2000008c

08000dd4 <_malloc_r>:
 8000dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd8:	1ccd      	adds	r5, r1, #3
 8000dda:	f025 0503 	bic.w	r5, r5, #3
 8000dde:	3508      	adds	r5, #8
 8000de0:	2d0c      	cmp	r5, #12
 8000de2:	bf38      	it	cc
 8000de4:	250c      	movcc	r5, #12
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	4607      	mov	r7, r0
 8000dea:	db01      	blt.n	8000df0 <_malloc_r+0x1c>
 8000dec:	42a9      	cmp	r1, r5
 8000dee:	d905      	bls.n	8000dfc <_malloc_r+0x28>
 8000df0:	230c      	movs	r3, #12
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	2600      	movs	r6, #0
 8000df6:	4630      	mov	r0, r6
 8000df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dfc:	4e2e      	ldr	r6, [pc, #184]	; (8000eb8 <_malloc_r+0xe4>)
 8000dfe:	f000 fbf5 	bl	80015ec <__malloc_lock>
 8000e02:	6833      	ldr	r3, [r6, #0]
 8000e04:	461c      	mov	r4, r3
 8000e06:	bb34      	cbnz	r4, 8000e56 <_malloc_r+0x82>
 8000e08:	4629      	mov	r1, r5
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	f7ff ffc2 	bl	8000d94 <sbrk_aligned>
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	4604      	mov	r4, r0
 8000e14:	d14d      	bne.n	8000eb2 <_malloc_r+0xde>
 8000e16:	6834      	ldr	r4, [r6, #0]
 8000e18:	4626      	mov	r6, r4
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d140      	bne.n	8000ea0 <_malloc_r+0xcc>
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	4631      	mov	r1, r6
 8000e22:	4638      	mov	r0, r7
 8000e24:	eb04 0803 	add.w	r8, r4, r3
 8000e28:	f000 fb36 	bl	8001498 <_sbrk_r>
 8000e2c:	4580      	cmp	r8, r0
 8000e2e:	d13a      	bne.n	8000ea6 <_malloc_r+0xd2>
 8000e30:	6821      	ldr	r1, [r4, #0]
 8000e32:	3503      	adds	r5, #3
 8000e34:	1a6d      	subs	r5, r5, r1
 8000e36:	f025 0503 	bic.w	r5, r5, #3
 8000e3a:	3508      	adds	r5, #8
 8000e3c:	2d0c      	cmp	r5, #12
 8000e3e:	bf38      	it	cc
 8000e40:	250c      	movcc	r5, #12
 8000e42:	4629      	mov	r1, r5
 8000e44:	4638      	mov	r0, r7
 8000e46:	f7ff ffa5 	bl	8000d94 <sbrk_aligned>
 8000e4a:	3001      	adds	r0, #1
 8000e4c:	d02b      	beq.n	8000ea6 <_malloc_r+0xd2>
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	442b      	add	r3, r5
 8000e52:	6023      	str	r3, [r4, #0]
 8000e54:	e00e      	b.n	8000e74 <_malloc_r+0xa0>
 8000e56:	6822      	ldr	r2, [r4, #0]
 8000e58:	1b52      	subs	r2, r2, r5
 8000e5a:	d41e      	bmi.n	8000e9a <_malloc_r+0xc6>
 8000e5c:	2a0b      	cmp	r2, #11
 8000e5e:	d916      	bls.n	8000e8e <_malloc_r+0xba>
 8000e60:	1961      	adds	r1, r4, r5
 8000e62:	42a3      	cmp	r3, r4
 8000e64:	6025      	str	r5, [r4, #0]
 8000e66:	bf18      	it	ne
 8000e68:	6059      	strne	r1, [r3, #4]
 8000e6a:	6863      	ldr	r3, [r4, #4]
 8000e6c:	bf08      	it	eq
 8000e6e:	6031      	streq	r1, [r6, #0]
 8000e70:	5162      	str	r2, [r4, r5]
 8000e72:	604b      	str	r3, [r1, #4]
 8000e74:	4638      	mov	r0, r7
 8000e76:	f104 060b 	add.w	r6, r4, #11
 8000e7a:	f000 fbbd 	bl	80015f8 <__malloc_unlock>
 8000e7e:	f026 0607 	bic.w	r6, r6, #7
 8000e82:	1d23      	adds	r3, r4, #4
 8000e84:	1af2      	subs	r2, r6, r3
 8000e86:	d0b6      	beq.n	8000df6 <_malloc_r+0x22>
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	50a3      	str	r3, [r4, r2]
 8000e8c:	e7b3      	b.n	8000df6 <_malloc_r+0x22>
 8000e8e:	6862      	ldr	r2, [r4, #4]
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	bf0c      	ite	eq
 8000e94:	6032      	streq	r2, [r6, #0]
 8000e96:	605a      	strne	r2, [r3, #4]
 8000e98:	e7ec      	b.n	8000e74 <_malloc_r+0xa0>
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	6864      	ldr	r4, [r4, #4]
 8000e9e:	e7b2      	b.n	8000e06 <_malloc_r+0x32>
 8000ea0:	4634      	mov	r4, r6
 8000ea2:	6876      	ldr	r6, [r6, #4]
 8000ea4:	e7b9      	b.n	8000e1a <_malloc_r+0x46>
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f000 fba4 	bl	80015f8 <__malloc_unlock>
 8000eb0:	e7a1      	b.n	8000df6 <_malloc_r+0x22>
 8000eb2:	6025      	str	r5, [r4, #0]
 8000eb4:	e7de      	b.n	8000e74 <_malloc_r+0xa0>
 8000eb6:	bf00      	nop
 8000eb8:	20000088 	.word	0x20000088

08000ebc <__sfputc_r>:
 8000ebc:	6893      	ldr	r3, [r2, #8]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	b410      	push	{r4}
 8000ec4:	6093      	str	r3, [r2, #8]
 8000ec6:	da08      	bge.n	8000eda <__sfputc_r+0x1e>
 8000ec8:	6994      	ldr	r4, [r2, #24]
 8000eca:	42a3      	cmp	r3, r4
 8000ecc:	db01      	blt.n	8000ed2 <__sfputc_r+0x16>
 8000ece:	290a      	cmp	r1, #10
 8000ed0:	d103      	bne.n	8000eda <__sfputc_r+0x1e>
 8000ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ed6:	f7ff bc31 	b.w	800073c <__swbuf_r>
 8000eda:	6813      	ldr	r3, [r2, #0]
 8000edc:	1c58      	adds	r0, r3, #1
 8000ede:	6010      	str	r0, [r2, #0]
 8000ee0:	7019      	strb	r1, [r3, #0]
 8000ee2:	4608      	mov	r0, r1
 8000ee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <__sfputs_r>:
 8000eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eec:	4606      	mov	r6, r0
 8000eee:	460f      	mov	r7, r1
 8000ef0:	4614      	mov	r4, r2
 8000ef2:	18d5      	adds	r5, r2, r3
 8000ef4:	42ac      	cmp	r4, r5
 8000ef6:	d101      	bne.n	8000efc <__sfputs_r+0x12>
 8000ef8:	2000      	movs	r0, #0
 8000efa:	e007      	b.n	8000f0c <__sfputs_r+0x22>
 8000efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f00:	463a      	mov	r2, r7
 8000f02:	4630      	mov	r0, r6
 8000f04:	f7ff ffda 	bl	8000ebc <__sfputc_r>
 8000f08:	1c43      	adds	r3, r0, #1
 8000f0a:	d1f3      	bne.n	8000ef4 <__sfputs_r+0xa>
 8000f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f10 <_vfiprintf_r>:
 8000f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f14:	460d      	mov	r5, r1
 8000f16:	b09d      	sub	sp, #116	; 0x74
 8000f18:	4614      	mov	r4, r2
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	4606      	mov	r6, r0
 8000f1e:	b118      	cbz	r0, 8000f28 <_vfiprintf_r+0x18>
 8000f20:	6983      	ldr	r3, [r0, #24]
 8000f22:	b90b      	cbnz	r3, 8000f28 <_vfiprintf_r+0x18>
 8000f24:	f7ff fde4 	bl	8000af0 <__sinit>
 8000f28:	4b89      	ldr	r3, [pc, #548]	; (8001150 <_vfiprintf_r+0x240>)
 8000f2a:	429d      	cmp	r5, r3
 8000f2c:	d11b      	bne.n	8000f66 <_vfiprintf_r+0x56>
 8000f2e:	6875      	ldr	r5, [r6, #4]
 8000f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f32:	07d9      	lsls	r1, r3, #31
 8000f34:	d405      	bmi.n	8000f42 <_vfiprintf_r+0x32>
 8000f36:	89ab      	ldrh	r3, [r5, #12]
 8000f38:	059a      	lsls	r2, r3, #22
 8000f3a:	d402      	bmi.n	8000f42 <_vfiprintf_r+0x32>
 8000f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f3e:	f7ff fe75 	bl	8000c2c <__retarget_lock_acquire_recursive>
 8000f42:	89ab      	ldrh	r3, [r5, #12]
 8000f44:	071b      	lsls	r3, r3, #28
 8000f46:	d501      	bpl.n	8000f4c <_vfiprintf_r+0x3c>
 8000f48:	692b      	ldr	r3, [r5, #16]
 8000f4a:	b9eb      	cbnz	r3, 8000f88 <_vfiprintf_r+0x78>
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	4630      	mov	r0, r6
 8000f50:	f7ff fc46 	bl	80007e0 <__swsetup_r>
 8000f54:	b1c0      	cbz	r0, 8000f88 <_vfiprintf_r+0x78>
 8000f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f58:	07dc      	lsls	r4, r3, #31
 8000f5a:	d50e      	bpl.n	8000f7a <_vfiprintf_r+0x6a>
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	b01d      	add	sp, #116	; 0x74
 8000f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f66:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <_vfiprintf_r+0x244>)
 8000f68:	429d      	cmp	r5, r3
 8000f6a:	d101      	bne.n	8000f70 <_vfiprintf_r+0x60>
 8000f6c:	68b5      	ldr	r5, [r6, #8]
 8000f6e:	e7df      	b.n	8000f30 <_vfiprintf_r+0x20>
 8000f70:	4b79      	ldr	r3, [pc, #484]	; (8001158 <_vfiprintf_r+0x248>)
 8000f72:	429d      	cmp	r5, r3
 8000f74:	bf08      	it	eq
 8000f76:	68f5      	ldreq	r5, [r6, #12]
 8000f78:	e7da      	b.n	8000f30 <_vfiprintf_r+0x20>
 8000f7a:	89ab      	ldrh	r3, [r5, #12]
 8000f7c:	0598      	lsls	r0, r3, #22
 8000f7e:	d4ed      	bmi.n	8000f5c <_vfiprintf_r+0x4c>
 8000f80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f82:	f7ff fe54 	bl	8000c2e <__retarget_lock_release_recursive>
 8000f86:	e7e9      	b.n	8000f5c <_vfiprintf_r+0x4c>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8000f8c:	2320      	movs	r3, #32
 8000f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f92:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f96:	2330      	movs	r3, #48	; 0x30
 8000f98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800115c <_vfiprintf_r+0x24c>
 8000f9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fa0:	f04f 0901 	mov.w	r9, #1
 8000fa4:	4623      	mov	r3, r4
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fac:	b10a      	cbz	r2, 8000fb2 <_vfiprintf_r+0xa2>
 8000fae:	2a25      	cmp	r2, #37	; 0x25
 8000fb0:	d1f9      	bne.n	8000fa6 <_vfiprintf_r+0x96>
 8000fb2:	ebba 0b04 	subs.w	fp, sl, r4
 8000fb6:	d00b      	beq.n	8000fd0 <_vfiprintf_r+0xc0>
 8000fb8:	465b      	mov	r3, fp
 8000fba:	4622      	mov	r2, r4
 8000fbc:	4629      	mov	r1, r5
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f7ff ff93 	bl	8000eea <__sfputs_r>
 8000fc4:	3001      	adds	r0, #1
 8000fc6:	f000 80aa 	beq.w	800111e <_vfiprintf_r+0x20e>
 8000fca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fcc:	445a      	add	r2, fp
 8000fce:	9209      	str	r2, [sp, #36]	; 0x24
 8000fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80a2 	beq.w	800111e <_vfiprintf_r+0x20e>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fe4:	f10a 0a01 	add.w	sl, sl, #1
 8000fe8:	9304      	str	r3, [sp, #16]
 8000fea:	9307      	str	r3, [sp, #28]
 8000fec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ff0:	931a      	str	r3, [sp, #104]	; 0x68
 8000ff2:	4654      	mov	r4, sl
 8000ff4:	2205      	movs	r2, #5
 8000ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ffa:	4858      	ldr	r0, [pc, #352]	; (800115c <_vfiprintf_r+0x24c>)
 8000ffc:	f7ff f8f8 	bl	80001f0 <memchr>
 8001000:	9a04      	ldr	r2, [sp, #16]
 8001002:	b9d8      	cbnz	r0, 800103c <_vfiprintf_r+0x12c>
 8001004:	06d1      	lsls	r1, r2, #27
 8001006:	bf44      	itt	mi
 8001008:	2320      	movmi	r3, #32
 800100a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800100e:	0713      	lsls	r3, r2, #28
 8001010:	bf44      	itt	mi
 8001012:	232b      	movmi	r3, #43	; 0x2b
 8001014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001018:	f89a 3000 	ldrb.w	r3, [sl]
 800101c:	2b2a      	cmp	r3, #42	; 0x2a
 800101e:	d015      	beq.n	800104c <_vfiprintf_r+0x13c>
 8001020:	9a07      	ldr	r2, [sp, #28]
 8001022:	4654      	mov	r4, sl
 8001024:	2000      	movs	r0, #0
 8001026:	f04f 0c0a 	mov.w	ip, #10
 800102a:	4621      	mov	r1, r4
 800102c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001030:	3b30      	subs	r3, #48	; 0x30
 8001032:	2b09      	cmp	r3, #9
 8001034:	d94e      	bls.n	80010d4 <_vfiprintf_r+0x1c4>
 8001036:	b1b0      	cbz	r0, 8001066 <_vfiprintf_r+0x156>
 8001038:	9207      	str	r2, [sp, #28]
 800103a:	e014      	b.n	8001066 <_vfiprintf_r+0x156>
 800103c:	eba0 0308 	sub.w	r3, r0, r8
 8001040:	fa09 f303 	lsl.w	r3, r9, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	9304      	str	r3, [sp, #16]
 8001048:	46a2      	mov	sl, r4
 800104a:	e7d2      	b.n	8000ff2 <_vfiprintf_r+0xe2>
 800104c:	9b03      	ldr	r3, [sp, #12]
 800104e:	1d19      	adds	r1, r3, #4
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	9103      	str	r1, [sp, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	bfbb      	ittet	lt
 8001058:	425b      	neglt	r3, r3
 800105a:	f042 0202 	orrlt.w	r2, r2, #2
 800105e:	9307      	strge	r3, [sp, #28]
 8001060:	9307      	strlt	r3, [sp, #28]
 8001062:	bfb8      	it	lt
 8001064:	9204      	strlt	r2, [sp, #16]
 8001066:	7823      	ldrb	r3, [r4, #0]
 8001068:	2b2e      	cmp	r3, #46	; 0x2e
 800106a:	d10c      	bne.n	8001086 <_vfiprintf_r+0x176>
 800106c:	7863      	ldrb	r3, [r4, #1]
 800106e:	2b2a      	cmp	r3, #42	; 0x2a
 8001070:	d135      	bne.n	80010de <_vfiprintf_r+0x1ce>
 8001072:	9b03      	ldr	r3, [sp, #12]
 8001074:	1d1a      	adds	r2, r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	9203      	str	r2, [sp, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	bfb8      	it	lt
 800107e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001082:	3402      	adds	r4, #2
 8001084:	9305      	str	r3, [sp, #20]
 8001086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800116c <_vfiprintf_r+0x25c>
 800108a:	7821      	ldrb	r1, [r4, #0]
 800108c:	2203      	movs	r2, #3
 800108e:	4650      	mov	r0, sl
 8001090:	f7ff f8ae 	bl	80001f0 <memchr>
 8001094:	b140      	cbz	r0, 80010a8 <_vfiprintf_r+0x198>
 8001096:	2340      	movs	r3, #64	; 0x40
 8001098:	eba0 000a 	sub.w	r0, r0, sl
 800109c:	fa03 f000 	lsl.w	r0, r3, r0
 80010a0:	9b04      	ldr	r3, [sp, #16]
 80010a2:	4303      	orrs	r3, r0
 80010a4:	3401      	adds	r4, #1
 80010a6:	9304      	str	r3, [sp, #16]
 80010a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ac:	482c      	ldr	r0, [pc, #176]	; (8001160 <_vfiprintf_r+0x250>)
 80010ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010b2:	2206      	movs	r2, #6
 80010b4:	f7ff f89c 	bl	80001f0 <memchr>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d03f      	beq.n	800113c <_vfiprintf_r+0x22c>
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <_vfiprintf_r+0x254>)
 80010be:	bb1b      	cbnz	r3, 8001108 <_vfiprintf_r+0x1f8>
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	3307      	adds	r3, #7
 80010c4:	f023 0307 	bic.w	r3, r3, #7
 80010c8:	3308      	adds	r3, #8
 80010ca:	9303      	str	r3, [sp, #12]
 80010cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010ce:	443b      	add	r3, r7
 80010d0:	9309      	str	r3, [sp, #36]	; 0x24
 80010d2:	e767      	b.n	8000fa4 <_vfiprintf_r+0x94>
 80010d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80010d8:	460c      	mov	r4, r1
 80010da:	2001      	movs	r0, #1
 80010dc:	e7a5      	b.n	800102a <_vfiprintf_r+0x11a>
 80010de:	2300      	movs	r3, #0
 80010e0:	3401      	adds	r4, #1
 80010e2:	9305      	str	r3, [sp, #20]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0c0a 	mov.w	ip, #10
 80010ea:	4620      	mov	r0, r4
 80010ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010f0:	3a30      	subs	r2, #48	; 0x30
 80010f2:	2a09      	cmp	r2, #9
 80010f4:	d903      	bls.n	80010fe <_vfiprintf_r+0x1ee>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0c5      	beq.n	8001086 <_vfiprintf_r+0x176>
 80010fa:	9105      	str	r1, [sp, #20]
 80010fc:	e7c3      	b.n	8001086 <_vfiprintf_r+0x176>
 80010fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001102:	4604      	mov	r4, r0
 8001104:	2301      	movs	r3, #1
 8001106:	e7f0      	b.n	80010ea <_vfiprintf_r+0x1da>
 8001108:	ab03      	add	r3, sp, #12
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	462a      	mov	r2, r5
 800110e:	4b16      	ldr	r3, [pc, #88]	; (8001168 <_vfiprintf_r+0x258>)
 8001110:	a904      	add	r1, sp, #16
 8001112:	4630      	mov	r0, r6
 8001114:	f3af 8000 	nop.w
 8001118:	4607      	mov	r7, r0
 800111a:	1c78      	adds	r0, r7, #1
 800111c:	d1d6      	bne.n	80010cc <_vfiprintf_r+0x1bc>
 800111e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001120:	07d9      	lsls	r1, r3, #31
 8001122:	d405      	bmi.n	8001130 <_vfiprintf_r+0x220>
 8001124:	89ab      	ldrh	r3, [r5, #12]
 8001126:	059a      	lsls	r2, r3, #22
 8001128:	d402      	bmi.n	8001130 <_vfiprintf_r+0x220>
 800112a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800112c:	f7ff fd7f 	bl	8000c2e <__retarget_lock_release_recursive>
 8001130:	89ab      	ldrh	r3, [r5, #12]
 8001132:	065b      	lsls	r3, r3, #25
 8001134:	f53f af12 	bmi.w	8000f5c <_vfiprintf_r+0x4c>
 8001138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800113a:	e711      	b.n	8000f60 <_vfiprintf_r+0x50>
 800113c:	ab03      	add	r3, sp, #12
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	462a      	mov	r2, r5
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <_vfiprintf_r+0x258>)
 8001144:	a904      	add	r1, sp, #16
 8001146:	4630      	mov	r0, r6
 8001148:	f000 f880 	bl	800124c <_printf_i>
 800114c:	e7e4      	b.n	8001118 <_vfiprintf_r+0x208>
 800114e:	bf00      	nop
 8001150:	08001738 	.word	0x08001738
 8001154:	08001758 	.word	0x08001758
 8001158:	08001718 	.word	0x08001718
 800115c:	08001778 	.word	0x08001778
 8001160:	08001782 	.word	0x08001782
 8001164:	00000000 	.word	0x00000000
 8001168:	08000eeb 	.word	0x08000eeb
 800116c:	0800177e 	.word	0x0800177e

08001170 <_printf_common>:
 8001170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001174:	4616      	mov	r6, r2
 8001176:	4699      	mov	r9, r3
 8001178:	688a      	ldr	r2, [r1, #8]
 800117a:	690b      	ldr	r3, [r1, #16]
 800117c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001180:	4293      	cmp	r3, r2
 8001182:	bfb8      	it	lt
 8001184:	4613      	movlt	r3, r2
 8001186:	6033      	str	r3, [r6, #0]
 8001188:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800118c:	4607      	mov	r7, r0
 800118e:	460c      	mov	r4, r1
 8001190:	b10a      	cbz	r2, 8001196 <_printf_common+0x26>
 8001192:	3301      	adds	r3, #1
 8001194:	6033      	str	r3, [r6, #0]
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	0699      	lsls	r1, r3, #26
 800119a:	bf42      	ittt	mi
 800119c:	6833      	ldrmi	r3, [r6, #0]
 800119e:	3302      	addmi	r3, #2
 80011a0:	6033      	strmi	r3, [r6, #0]
 80011a2:	6825      	ldr	r5, [r4, #0]
 80011a4:	f015 0506 	ands.w	r5, r5, #6
 80011a8:	d106      	bne.n	80011b8 <_printf_common+0x48>
 80011aa:	f104 0a19 	add.w	sl, r4, #25
 80011ae:	68e3      	ldr	r3, [r4, #12]
 80011b0:	6832      	ldr	r2, [r6, #0]
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	42ab      	cmp	r3, r5
 80011b6:	dc26      	bgt.n	8001206 <_printf_common+0x96>
 80011b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011bc:	1e13      	subs	r3, r2, #0
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	bf18      	it	ne
 80011c2:	2301      	movne	r3, #1
 80011c4:	0692      	lsls	r2, r2, #26
 80011c6:	d42b      	bmi.n	8001220 <_printf_common+0xb0>
 80011c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011cc:	4649      	mov	r1, r9
 80011ce:	4638      	mov	r0, r7
 80011d0:	47c0      	blx	r8
 80011d2:	3001      	adds	r0, #1
 80011d4:	d01e      	beq.n	8001214 <_printf_common+0xa4>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	68e5      	ldr	r5, [r4, #12]
 80011da:	6832      	ldr	r2, [r6, #0]
 80011dc:	f003 0306 	and.w	r3, r3, #6
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	bf08      	it	eq
 80011e4:	1aad      	subeq	r5, r5, r2
 80011e6:	68a3      	ldr	r3, [r4, #8]
 80011e8:	6922      	ldr	r2, [r4, #16]
 80011ea:	bf0c      	ite	eq
 80011ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011f0:	2500      	movne	r5, #0
 80011f2:	4293      	cmp	r3, r2
 80011f4:	bfc4      	itt	gt
 80011f6:	1a9b      	subgt	r3, r3, r2
 80011f8:	18ed      	addgt	r5, r5, r3
 80011fa:	2600      	movs	r6, #0
 80011fc:	341a      	adds	r4, #26
 80011fe:	42b5      	cmp	r5, r6
 8001200:	d11a      	bne.n	8001238 <_printf_common+0xc8>
 8001202:	2000      	movs	r0, #0
 8001204:	e008      	b.n	8001218 <_printf_common+0xa8>
 8001206:	2301      	movs	r3, #1
 8001208:	4652      	mov	r2, sl
 800120a:	4649      	mov	r1, r9
 800120c:	4638      	mov	r0, r7
 800120e:	47c0      	blx	r8
 8001210:	3001      	adds	r0, #1
 8001212:	d103      	bne.n	800121c <_printf_common+0xac>
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121c:	3501      	adds	r5, #1
 800121e:	e7c6      	b.n	80011ae <_printf_common+0x3e>
 8001220:	18e1      	adds	r1, r4, r3
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	2030      	movs	r0, #48	; 0x30
 8001226:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800122a:	4422      	add	r2, r4
 800122c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001230:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001234:	3302      	adds	r3, #2
 8001236:	e7c7      	b.n	80011c8 <_printf_common+0x58>
 8001238:	2301      	movs	r3, #1
 800123a:	4622      	mov	r2, r4
 800123c:	4649      	mov	r1, r9
 800123e:	4638      	mov	r0, r7
 8001240:	47c0      	blx	r8
 8001242:	3001      	adds	r0, #1
 8001244:	d0e6      	beq.n	8001214 <_printf_common+0xa4>
 8001246:	3601      	adds	r6, #1
 8001248:	e7d9      	b.n	80011fe <_printf_common+0x8e>
	...

0800124c <_printf_i>:
 800124c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001250:	7e0f      	ldrb	r7, [r1, #24]
 8001252:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001254:	2f78      	cmp	r7, #120	; 0x78
 8001256:	4691      	mov	r9, r2
 8001258:	4680      	mov	r8, r0
 800125a:	460c      	mov	r4, r1
 800125c:	469a      	mov	sl, r3
 800125e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001262:	d807      	bhi.n	8001274 <_printf_i+0x28>
 8001264:	2f62      	cmp	r7, #98	; 0x62
 8001266:	d80a      	bhi.n	800127e <_printf_i+0x32>
 8001268:	2f00      	cmp	r7, #0
 800126a:	f000 80d8 	beq.w	800141e <_printf_i+0x1d2>
 800126e:	2f58      	cmp	r7, #88	; 0x58
 8001270:	f000 80a3 	beq.w	80013ba <_printf_i+0x16e>
 8001274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001278:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800127c:	e03a      	b.n	80012f4 <_printf_i+0xa8>
 800127e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001282:	2b15      	cmp	r3, #21
 8001284:	d8f6      	bhi.n	8001274 <_printf_i+0x28>
 8001286:	a101      	add	r1, pc, #4	; (adr r1, 800128c <_printf_i+0x40>)
 8001288:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800128c:	080012e5 	.word	0x080012e5
 8001290:	080012f9 	.word	0x080012f9
 8001294:	08001275 	.word	0x08001275
 8001298:	08001275 	.word	0x08001275
 800129c:	08001275 	.word	0x08001275
 80012a0:	08001275 	.word	0x08001275
 80012a4:	080012f9 	.word	0x080012f9
 80012a8:	08001275 	.word	0x08001275
 80012ac:	08001275 	.word	0x08001275
 80012b0:	08001275 	.word	0x08001275
 80012b4:	08001275 	.word	0x08001275
 80012b8:	08001405 	.word	0x08001405
 80012bc:	08001329 	.word	0x08001329
 80012c0:	080013e7 	.word	0x080013e7
 80012c4:	08001275 	.word	0x08001275
 80012c8:	08001275 	.word	0x08001275
 80012cc:	08001427 	.word	0x08001427
 80012d0:	08001275 	.word	0x08001275
 80012d4:	08001329 	.word	0x08001329
 80012d8:	08001275 	.word	0x08001275
 80012dc:	08001275 	.word	0x08001275
 80012e0:	080013ef 	.word	0x080013ef
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	1d1a      	adds	r2, r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	602a      	str	r2, [r5, #0]
 80012ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0a3      	b.n	8001440 <_printf_i+0x1f4>
 80012f8:	6820      	ldr	r0, [r4, #0]
 80012fa:	6829      	ldr	r1, [r5, #0]
 80012fc:	0606      	lsls	r6, r0, #24
 80012fe:	f101 0304 	add.w	r3, r1, #4
 8001302:	d50a      	bpl.n	800131a <_printf_i+0xce>
 8001304:	680e      	ldr	r6, [r1, #0]
 8001306:	602b      	str	r3, [r5, #0]
 8001308:	2e00      	cmp	r6, #0
 800130a:	da03      	bge.n	8001314 <_printf_i+0xc8>
 800130c:	232d      	movs	r3, #45	; 0x2d
 800130e:	4276      	negs	r6, r6
 8001310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001314:	485e      	ldr	r0, [pc, #376]	; (8001490 <_printf_i+0x244>)
 8001316:	230a      	movs	r3, #10
 8001318:	e019      	b.n	800134e <_printf_i+0x102>
 800131a:	680e      	ldr	r6, [r1, #0]
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001322:	bf18      	it	ne
 8001324:	b236      	sxthne	r6, r6
 8001326:	e7ef      	b.n	8001308 <_printf_i+0xbc>
 8001328:	682b      	ldr	r3, [r5, #0]
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	1d19      	adds	r1, r3, #4
 800132e:	6029      	str	r1, [r5, #0]
 8001330:	0601      	lsls	r1, r0, #24
 8001332:	d501      	bpl.n	8001338 <_printf_i+0xec>
 8001334:	681e      	ldr	r6, [r3, #0]
 8001336:	e002      	b.n	800133e <_printf_i+0xf2>
 8001338:	0646      	lsls	r6, r0, #25
 800133a:	d5fb      	bpl.n	8001334 <_printf_i+0xe8>
 800133c:	881e      	ldrh	r6, [r3, #0]
 800133e:	4854      	ldr	r0, [pc, #336]	; (8001490 <_printf_i+0x244>)
 8001340:	2f6f      	cmp	r7, #111	; 0x6f
 8001342:	bf0c      	ite	eq
 8001344:	2308      	moveq	r3, #8
 8001346:	230a      	movne	r3, #10
 8001348:	2100      	movs	r1, #0
 800134a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800134e:	6865      	ldr	r5, [r4, #4]
 8001350:	60a5      	str	r5, [r4, #8]
 8001352:	2d00      	cmp	r5, #0
 8001354:	bfa2      	ittt	ge
 8001356:	6821      	ldrge	r1, [r4, #0]
 8001358:	f021 0104 	bicge.w	r1, r1, #4
 800135c:	6021      	strge	r1, [r4, #0]
 800135e:	b90e      	cbnz	r6, 8001364 <_printf_i+0x118>
 8001360:	2d00      	cmp	r5, #0
 8001362:	d04d      	beq.n	8001400 <_printf_i+0x1b4>
 8001364:	4615      	mov	r5, r2
 8001366:	fbb6 f1f3 	udiv	r1, r6, r3
 800136a:	fb03 6711 	mls	r7, r3, r1, r6
 800136e:	5dc7      	ldrb	r7, [r0, r7]
 8001370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001374:	4637      	mov	r7, r6
 8001376:	42bb      	cmp	r3, r7
 8001378:	460e      	mov	r6, r1
 800137a:	d9f4      	bls.n	8001366 <_printf_i+0x11a>
 800137c:	2b08      	cmp	r3, #8
 800137e:	d10b      	bne.n	8001398 <_printf_i+0x14c>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	07de      	lsls	r6, r3, #31
 8001384:	d508      	bpl.n	8001398 <_printf_i+0x14c>
 8001386:	6923      	ldr	r3, [r4, #16]
 8001388:	6861      	ldr	r1, [r4, #4]
 800138a:	4299      	cmp	r1, r3
 800138c:	bfde      	ittt	le
 800138e:	2330      	movle	r3, #48	; 0x30
 8001390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001398:	1b52      	subs	r2, r2, r5
 800139a:	6122      	str	r2, [r4, #16]
 800139c:	f8cd a000 	str.w	sl, [sp]
 80013a0:	464b      	mov	r3, r9
 80013a2:	aa03      	add	r2, sp, #12
 80013a4:	4621      	mov	r1, r4
 80013a6:	4640      	mov	r0, r8
 80013a8:	f7ff fee2 	bl	8001170 <_printf_common>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d14c      	bne.n	800144a <_printf_i+0x1fe>
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	b004      	add	sp, #16
 80013b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ba:	4835      	ldr	r0, [pc, #212]	; (8001490 <_printf_i+0x244>)
 80013bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80013c0:	6829      	ldr	r1, [r5, #0]
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80013c8:	6029      	str	r1, [r5, #0]
 80013ca:	061d      	lsls	r5, r3, #24
 80013cc:	d514      	bpl.n	80013f8 <_printf_i+0x1ac>
 80013ce:	07df      	lsls	r7, r3, #31
 80013d0:	bf44      	itt	mi
 80013d2:	f043 0320 	orrmi.w	r3, r3, #32
 80013d6:	6023      	strmi	r3, [r4, #0]
 80013d8:	b91e      	cbnz	r6, 80013e2 <_printf_i+0x196>
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	f023 0320 	bic.w	r3, r3, #32
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	2310      	movs	r3, #16
 80013e4:	e7b0      	b.n	8001348 <_printf_i+0xfc>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	f043 0320 	orr.w	r3, r3, #32
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	2378      	movs	r3, #120	; 0x78
 80013f0:	4828      	ldr	r0, [pc, #160]	; (8001494 <_printf_i+0x248>)
 80013f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80013f6:	e7e3      	b.n	80013c0 <_printf_i+0x174>
 80013f8:	0659      	lsls	r1, r3, #25
 80013fa:	bf48      	it	mi
 80013fc:	b2b6      	uxthmi	r6, r6
 80013fe:	e7e6      	b.n	80013ce <_printf_i+0x182>
 8001400:	4615      	mov	r5, r2
 8001402:	e7bb      	b.n	800137c <_printf_i+0x130>
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	6826      	ldr	r6, [r4, #0]
 8001408:	6961      	ldr	r1, [r4, #20]
 800140a:	1d18      	adds	r0, r3, #4
 800140c:	6028      	str	r0, [r5, #0]
 800140e:	0635      	lsls	r5, r6, #24
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	d501      	bpl.n	8001418 <_printf_i+0x1cc>
 8001414:	6019      	str	r1, [r3, #0]
 8001416:	e002      	b.n	800141e <_printf_i+0x1d2>
 8001418:	0670      	lsls	r0, r6, #25
 800141a:	d5fb      	bpl.n	8001414 <_printf_i+0x1c8>
 800141c:	8019      	strh	r1, [r3, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	6123      	str	r3, [r4, #16]
 8001422:	4615      	mov	r5, r2
 8001424:	e7ba      	b.n	800139c <_printf_i+0x150>
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	1d1a      	adds	r2, r3, #4
 800142a:	602a      	str	r2, [r5, #0]
 800142c:	681d      	ldr	r5, [r3, #0]
 800142e:	6862      	ldr	r2, [r4, #4]
 8001430:	2100      	movs	r1, #0
 8001432:	4628      	mov	r0, r5
 8001434:	f7fe fedc 	bl	80001f0 <memchr>
 8001438:	b108      	cbz	r0, 800143e <_printf_i+0x1f2>
 800143a:	1b40      	subs	r0, r0, r5
 800143c:	6060      	str	r0, [r4, #4]
 800143e:	6863      	ldr	r3, [r4, #4]
 8001440:	6123      	str	r3, [r4, #16]
 8001442:	2300      	movs	r3, #0
 8001444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001448:	e7a8      	b.n	800139c <_printf_i+0x150>
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	462a      	mov	r2, r5
 800144e:	4649      	mov	r1, r9
 8001450:	4640      	mov	r0, r8
 8001452:	47d0      	blx	sl
 8001454:	3001      	adds	r0, #1
 8001456:	d0ab      	beq.n	80013b0 <_printf_i+0x164>
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	079b      	lsls	r3, r3, #30
 800145c:	d413      	bmi.n	8001486 <_printf_i+0x23a>
 800145e:	68e0      	ldr	r0, [r4, #12]
 8001460:	9b03      	ldr	r3, [sp, #12]
 8001462:	4298      	cmp	r0, r3
 8001464:	bfb8      	it	lt
 8001466:	4618      	movlt	r0, r3
 8001468:	e7a4      	b.n	80013b4 <_printf_i+0x168>
 800146a:	2301      	movs	r3, #1
 800146c:	4632      	mov	r2, r6
 800146e:	4649      	mov	r1, r9
 8001470:	4640      	mov	r0, r8
 8001472:	47d0      	blx	sl
 8001474:	3001      	adds	r0, #1
 8001476:	d09b      	beq.n	80013b0 <_printf_i+0x164>
 8001478:	3501      	adds	r5, #1
 800147a:	68e3      	ldr	r3, [r4, #12]
 800147c:	9903      	ldr	r1, [sp, #12]
 800147e:	1a5b      	subs	r3, r3, r1
 8001480:	42ab      	cmp	r3, r5
 8001482:	dcf2      	bgt.n	800146a <_printf_i+0x21e>
 8001484:	e7eb      	b.n	800145e <_printf_i+0x212>
 8001486:	2500      	movs	r5, #0
 8001488:	f104 0619 	add.w	r6, r4, #25
 800148c:	e7f5      	b.n	800147a <_printf_i+0x22e>
 800148e:	bf00      	nop
 8001490:	08001789 	.word	0x08001789
 8001494:	0800179a 	.word	0x0800179a

08001498 <_sbrk_r>:
 8001498:	b538      	push	{r3, r4, r5, lr}
 800149a:	4d06      	ldr	r5, [pc, #24]	; (80014b4 <_sbrk_r+0x1c>)
 800149c:	2300      	movs	r3, #0
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	602b      	str	r3, [r5, #0]
 80014a4:	f7ff f834 	bl	8000510 <_sbrk>
 80014a8:	1c43      	adds	r3, r0, #1
 80014aa:	d102      	bne.n	80014b2 <_sbrk_r+0x1a>
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	b103      	cbz	r3, 80014b2 <_sbrk_r+0x1a>
 80014b0:	6023      	str	r3, [r4, #0]
 80014b2:	bd38      	pop	{r3, r4, r5, pc}
 80014b4:	20000090 	.word	0x20000090

080014b8 <__sread>:
 80014b8:	b510      	push	{r4, lr}
 80014ba:	460c      	mov	r4, r1
 80014bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014c0:	f000 f8a0 	bl	8001604 <_read_r>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	bfab      	itete	ge
 80014c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80014ca:	89a3      	ldrhlt	r3, [r4, #12]
 80014cc:	181b      	addge	r3, r3, r0
 80014ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80014d2:	bfac      	ite	ge
 80014d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80014d6:	81a3      	strhlt	r3, [r4, #12]
 80014d8:	bd10      	pop	{r4, pc}

080014da <__swrite>:
 80014da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014de:	461f      	mov	r7, r3
 80014e0:	898b      	ldrh	r3, [r1, #12]
 80014e2:	05db      	lsls	r3, r3, #23
 80014e4:	4605      	mov	r5, r0
 80014e6:	460c      	mov	r4, r1
 80014e8:	4616      	mov	r6, r2
 80014ea:	d505      	bpl.n	80014f8 <__swrite+0x1e>
 80014ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014f0:	2302      	movs	r3, #2
 80014f2:	2200      	movs	r2, #0
 80014f4:	f000 f868 	bl	80015c8 <_lseek_r>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001502:	81a3      	strh	r3, [r4, #12]
 8001504:	4632      	mov	r2, r6
 8001506:	463b      	mov	r3, r7
 8001508:	4628      	mov	r0, r5
 800150a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800150e:	f000 b817 	b.w	8001540 <_write_r>

08001512 <__sseek>:
 8001512:	b510      	push	{r4, lr}
 8001514:	460c      	mov	r4, r1
 8001516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800151a:	f000 f855 	bl	80015c8 <_lseek_r>
 800151e:	1c43      	adds	r3, r0, #1
 8001520:	89a3      	ldrh	r3, [r4, #12]
 8001522:	bf15      	itete	ne
 8001524:	6560      	strne	r0, [r4, #84]	; 0x54
 8001526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800152a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800152e:	81a3      	strheq	r3, [r4, #12]
 8001530:	bf18      	it	ne
 8001532:	81a3      	strhne	r3, [r4, #12]
 8001534:	bd10      	pop	{r4, pc}

08001536 <__sclose>:
 8001536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800153a:	f000 b813 	b.w	8001564 <_close_r>
	...

08001540 <_write_r>:
 8001540:	b538      	push	{r3, r4, r5, lr}
 8001542:	4d07      	ldr	r5, [pc, #28]	; (8001560 <_write_r+0x20>)
 8001544:	4604      	mov	r4, r0
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	2200      	movs	r2, #0
 800154c:	602a      	str	r2, [r5, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	f7fe ff8d 	bl	800046e <_write>
 8001554:	1c43      	adds	r3, r0, #1
 8001556:	d102      	bne.n	800155e <_write_r+0x1e>
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	b103      	cbz	r3, 800155e <_write_r+0x1e>
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	bd38      	pop	{r3, r4, r5, pc}
 8001560:	20000090 	.word	0x20000090

08001564 <_close_r>:
 8001564:	b538      	push	{r3, r4, r5, lr}
 8001566:	4d06      	ldr	r5, [pc, #24]	; (8001580 <_close_r+0x1c>)
 8001568:	2300      	movs	r3, #0
 800156a:	4604      	mov	r4, r0
 800156c:	4608      	mov	r0, r1
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	f7fe ff99 	bl	80004a6 <_close>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d102      	bne.n	800157e <_close_r+0x1a>
 8001578:	682b      	ldr	r3, [r5, #0]
 800157a:	b103      	cbz	r3, 800157e <_close_r+0x1a>
 800157c:	6023      	str	r3, [r4, #0]
 800157e:	bd38      	pop	{r3, r4, r5, pc}
 8001580:	20000090 	.word	0x20000090

08001584 <_fstat_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4d07      	ldr	r5, [pc, #28]	; (80015a4 <_fstat_r+0x20>)
 8001588:	2300      	movs	r3, #0
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	602b      	str	r3, [r5, #0]
 8001592:	f7fe ff94 	bl	80004be <_fstat>
 8001596:	1c43      	adds	r3, r0, #1
 8001598:	d102      	bne.n	80015a0 <_fstat_r+0x1c>
 800159a:	682b      	ldr	r3, [r5, #0]
 800159c:	b103      	cbz	r3, 80015a0 <_fstat_r+0x1c>
 800159e:	6023      	str	r3, [r4, #0]
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
 80015a2:	bf00      	nop
 80015a4:	20000090 	.word	0x20000090

080015a8 <_isatty_r>:
 80015a8:	b538      	push	{r3, r4, r5, lr}
 80015aa:	4d06      	ldr	r5, [pc, #24]	; (80015c4 <_isatty_r+0x1c>)
 80015ac:	2300      	movs	r3, #0
 80015ae:	4604      	mov	r4, r0
 80015b0:	4608      	mov	r0, r1
 80015b2:	602b      	str	r3, [r5, #0]
 80015b4:	f7fe ff93 	bl	80004de <_isatty>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d102      	bne.n	80015c2 <_isatty_r+0x1a>
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	b103      	cbz	r3, 80015c2 <_isatty_r+0x1a>
 80015c0:	6023      	str	r3, [r4, #0]
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	20000090 	.word	0x20000090

080015c8 <_lseek_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d07      	ldr	r5, [pc, #28]	; (80015e8 <_lseek_r+0x20>)
 80015cc:	4604      	mov	r4, r0
 80015ce:	4608      	mov	r0, r1
 80015d0:	4611      	mov	r1, r2
 80015d2:	2200      	movs	r2, #0
 80015d4:	602a      	str	r2, [r5, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f7fe ff8c 	bl	80004f4 <_lseek>
 80015dc:	1c43      	adds	r3, r0, #1
 80015de:	d102      	bne.n	80015e6 <_lseek_r+0x1e>
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	b103      	cbz	r3, 80015e6 <_lseek_r+0x1e>
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	20000090 	.word	0x20000090

080015ec <__malloc_lock>:
 80015ec:	4801      	ldr	r0, [pc, #4]	; (80015f4 <__malloc_lock+0x8>)
 80015ee:	f7ff bb1d 	b.w	8000c2c <__retarget_lock_acquire_recursive>
 80015f2:	bf00      	nop
 80015f4:	20000084 	.word	0x20000084

080015f8 <__malloc_unlock>:
 80015f8:	4801      	ldr	r0, [pc, #4]	; (8001600 <__malloc_unlock+0x8>)
 80015fa:	f7ff bb18 	b.w	8000c2e <__retarget_lock_release_recursive>
 80015fe:	bf00      	nop
 8001600:	20000084 	.word	0x20000084

08001604 <_read_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4d07      	ldr	r5, [pc, #28]	; (8001624 <_read_r+0x20>)
 8001608:	4604      	mov	r4, r0
 800160a:	4608      	mov	r0, r1
 800160c:	4611      	mov	r1, r2
 800160e:	2200      	movs	r2, #0
 8001610:	602a      	str	r2, [r5, #0]
 8001612:	461a      	mov	r2, r3
 8001614:	f7fe ff0e 	bl	8000434 <_read>
 8001618:	1c43      	adds	r3, r0, #1
 800161a:	d102      	bne.n	8001622 <_read_r+0x1e>
 800161c:	682b      	ldr	r3, [r5, #0]
 800161e:	b103      	cbz	r3, 8001622 <_read_r+0x1e>
 8001620:	6023      	str	r3, [r4, #0]
 8001622:	bd38      	pop	{r3, r4, r5, pc}
 8001624:	20000090 	.word	0x20000090

08001628 <_init>:
 8001628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800162a:	bf00      	nop
 800162c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800162e:	bc08      	pop	{r3}
 8001630:	469e      	mov	lr, r3
 8001632:	4770      	bx	lr

08001634 <_fini>:
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	bf00      	nop
 8001638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163a:	bc08      	pop	{r3}
 800163c:	469e      	mov	lr, r3
 800163e:	4770      	bx	lr
